Created with MILKDROP 3 PRO on 27/11/2024 at 22:52:53
https://twitter.com/MilkDrop2077

blending_pattern=curtain
blending_progress=0.29
blending_direction=1
random_1=0.926423
random_2=0.054472
random_3=0.237669
random_4=0.597968
random_5=0.288482

[PRESET1_BEGIN]
NAME=MilkDrop2077 - NeonAngel vs Flexi - Venom Textures God4dxxx
MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=5.000
fGammaAdj=1.070
fDecay=0.955
fVideoEchoZoom=100.000
fVideoEchoAlpha=0.650
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.133
fWaveSmoothing=0.000
fWaveParam=-1.000
fModWaveAlphaStart=1.000
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=0.010
fWarpScale=100.000
fZoomExponent=0.23118
fShader=0.000
zoom=0.99010
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=1.00000
sy=1.00000
wave_r=0.500
wave_g=0.500
wave_b=0.500
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=1.000
ob_g=1.000
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=1.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
per_frame_init_1=x1 = 0.9;
per_frame_init_2=y1 = 0.5;
per_frame_init_3=
per_frame_init_4=x2 = 0.5; y2 = 0.5;
per_frame_init_5=x3 = 0.5; y3 = 0.5;
per_frame_init_6=x4 = 0.5; y4 = 0.5;
per_frame_1=decay = 1;
per_frame_2=xx1 = xx1*0.9 + (bass)*0.01;
per_frame_3=xx2 = xx2*0.9 + (treb)*0.01;
per_frame_4=yy1 = yy1*0.94 + (treb+bass)*0.0075;
per_frame_5=
per_frame_6=x1 = 0.5 + xx1-xx2;
per_frame_7=y1 = 0.5 + yy1;
per_frame_8=
per_frame_9=//x2 = 0;y2 = 0;x3 = 0;y3 = 0;x4 = 0;y4 = 0;
per_frame_10=
per_frame_11=spring = 18;
per_frame_12=grav = 1;
per_frame_13=resist = 3;
per_frame_14=bounce = 0.9;
per_frame_15=dt = 0.0002;
per_frame_16=
per_frame_17=vx2 = vx2*(1-resist*dt) + dt*((x1+x3-2*x2)*spring);
per_frame_18=vy2 = vy2*(1-resist*dt) + dt*((y1+y3-2*y2)*spring-grav);
per_frame_19=vx3 = vx3*(1-resist*dt) + dt*((x2+x4-2*x3)*spring);
per_frame_20=vy3 = vy3*(1-resist*dt) + dt*((y2+y4-2*y3)*spring-grav);
per_frame_21=vx4 = vx4*(1-resist*dt) + dt*((x3-x4)*spring);
per_frame_22=vy4 = vy4*(1-resist*dt) + dt*((y3-y4)*spring-grav);
per_frame_23=
per_frame_24=x2 = x2 + vx2;
per_frame_25=y2 = y2 + vy2;
per_frame_26=x3 = x3 + vx3;
per_frame_27=y3 = y3 + vy3;
per_frame_28=x4 = x4 + vx4;
per_frame_29=y4 = y4 + vy4;
per_frame_30=
per_frame_31=vx2 = if(above(x2,0),vx2,abs(vx2)*bounce);
per_frame_32=vx2 = if(below(x2,1),vx2,-abs(vx2)*bounce);
per_frame_33=vx3 = if(above(x3,0),vx3,abs(vx3)*bounce);
per_frame_34=vx3 = if(below(x3,1),vx3,-abs(vx3)*bounce);
per_frame_35=vx4 = if(above(x4,0),vx4,abs(vx4)*bounce);
per_frame_36=vx4 = if(below(x4,1),vx4,-abs(vx4)*bounce);
per_frame_37=
per_frame_38=vy2 = if(above(y2,0),vy2,abs(vy2)*bounce);
per_frame_39=vy2 = if(below(y2,1),vy2,-abs(vy2)*bounce);
per_frame_40=vy3 = if(above(y3,0),vy3,abs(vy3)*bounce);
per_frame_41=vy3 = if(below(y3,1),vy3,-abs(vy3)*bounce);
per_frame_42=vy4 = if(above(y4,0),vy4,abs(vy4)*bounce);
per_frame_43=vy4 = if(below(y4,1),vy4,-abs(vy4)*bounce);
per_frame_44=
per_frame_45=
per_frame_46=q1 = x1;
per_frame_47=q2 = x2;
per_frame_48=q3 = x3;
per_frame_49=q4 = x4;
per_frame_50=
per_frame_51=q5 = y1;
per_frame_52=q6 = y2;
per_frame_53=q7 = y3;
per_frame_54=q8 = y4;
per_frame_55=
per_frame_56=
per_frame_57=zoom = 1;//0.999;
per_frame_58=
per_frame_59=
per_frame_60=
per_frame_61=bb = bb*0.99 + bass*0.02;
per_frame_62=mm = mm*0.99 + mid*0.02;
per_frame_63=tt = tt*0.99 + treb*0.02;
per_frame_64=
per_frame_65=mx = max(max(bb,mm),tt);
per_frame_66=mn = min(min(bb,mm),tt);
per_frame_67=
per_frame_68=ob_r = (bb-mn)/(mx-mn);
per_frame_69=ob_b = (mm-mn)/(mx-mn);
per_frame_70=ob_g = (tt-mn)/(mx-mn);
per_frame_71=q6 = atan2(vx4,vy4);
per_frame_72=q5 = sqrt(vx4*vx4 + vy4*vy4);
per_pixel_1=
per_pixel_2=dir = -q6*1 + asin(1)*1;
per_pixel_3=
per_pixel_4=b1 = 0.1; // distance
per_pixel_5=m1 = q5*25;//-0.6 + q5*200; // size
per_pixel_6=t1 = 0.05; // velocity
per_pixel_7=
per_pixel_8=xx = 0.5 + (q4-0.5)/aspectx;
per_pixel_9=yy = 1-(0.5 + (q8-0.5)/aspecty);
per_pixel_10=
per_pixel_11=
per_pixel_12=x1 = xx   +cos(dir+1.5708)*b1;
per_pixel_13=y1 = yy -sin(dir+1.5708)*b1;
per_pixel_14=
per_pixel_15=x2 = xx   -cos(dir+1.5708)*b1;
per_pixel_16=y2 = yy +sin(dir+1.5708)*b1;
per_pixel_17=
per_pixel_18=d1 = sqrt((x1-x)*(x1-x)+(y1-y)*(y1-y))-b1*2;
per_pixel_19=si1 = 1- 1/(1+pow(2,-d1*100));
per_pixel_20=
per_pixel_21=d2 = sqrt((x2-x)*(x2-x)+(y2-y)*(y2-y))-b1*2;
per_pixel_22=si2 = 1- 1/(1+pow(2,-d2*100));
per_pixel_23=
per_pixel_24=si3 = -pow(q5,3)*00;
per_pixel_25=
per_pixel_26=dx = (si1*sin(y1-y)*m1*d1  - si2*sin(y2-y)*m1*d2 + si3*cos(dir)*t1)*2/aspectx;
per_pixel_27=dy = (-si1*sin(x1-x)*m1*d1 + si2*sin(x2-x)*m1*d2 - si3*sin(dir)*t1)*2/aspecty;
warp_1=`#define sampler_pic sampler_Pattern_041
warp_2=`sampler2D sampler_pic;
warp_3=`
warp_4=`shader_body
warp_5=`{
warp_6=`    ret = tex2D( sampler_main, uv ).xyz;
warp_7=`
warp_8=`    // ERROR DIFFUSION DITHER - looks great
warp_9=`    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw + rand_frame.xy;
warp_10=`    ret += (tex2D(sampler_noise_lq, dither_uv).xyz-0.5)/256.0*1;
warp_11=`
warp_12=`    // mix in img...
warp_13=`    float3 pic = tex2D(sampler_pic, uv_orig*aspect.xy).xyz;
warp_14=`    float lum = lum(pic);
warp_15=`    float use_it = abs(lum*0.8+0.1 - (0.5+roam_cos.y*0.25));
warp_16=`    float LFNoise = tex2D(sampler_noise_lq, uv*0.1 + time*0.01).x*6-2;
warp_17=`    use_it = saturate(1 - use_it*(3+9*rand_preset.x) - LFNoise);
warp_18=`    ret = lerp(ret, pic, use_it.xxx);
warp_19=`
warp_20=`    // darken over time
warp_21=`    //ret -= 0.004;
warp_22=`    //ret *= 0.99;
warp_23=`    ret *= 0.97 + 0.03*saturate( length(uv - uv_orig)*200 );  // center only
warp_24=`}
warp_25=`
comp_1=`sampler sampler_MilkDrop3_025;
comp_2=`sampler sampler_MilkDrop3_024;
comp_3=`
comp_4=`shader_body
comp_5=`{
comp_6=`
comp_7=`
comp_8=`    float2 d = texsize.zw*12;
comp_9=`    float3 dx = ( GetBlur1(uv + float2(1,0)*d) - GetBlur1(uv-float2(1,0)*d) );
comp_10=`    float3 dy = ( GetBlur1(uv + float2(0,1)*d) - GetBlur1(uv-float2(0,1)*d) );
comp_11=`    float2 my_uv = uv + float2(dx.y,dy.y)*0.1;
comp_12=`
comp_13=`float3 re;
comp_14=`
comp_15=`//uv = uv + 0.02*float2(cos(uv.y*27),sin(uv.x*39));
comp_16=`float2 m = float2(1-q4,q8);
comp_17=`float2 bg_uv = m + (uv-m)*0.992; // subtle 3D shadow drop
comp_18=`float2 mid_uv = m + (uv-m)*0.996;
comp_19=`ret = lerp( float3(0,0,0.2), float3(0.3,0,1),tex2D( sampler_fw_main, bg_uv).y);
comp_20=`ret = lerp(ret, float3(1,1,0), max(GetBlur1(bg_uv).z*1.5,tex2D
comp_21=`( sampler_main, mid_uv).z));
comp_22=`ret *= 1-GetBlur1(bg_uv).x*2; // drop shadow
comp_23=`ret = lerp( ret, float3(1,0.01,0.4),tex2D( sampler_fw_main, uv).x);
comp_24=`//ret = tex2D(sampler_main, uv);
comp_25=`re = tex2D( sampler_MilkDrop3_025, my_uv);
comp_26=`re = lerp( tex2D(sampler_MilkDrop3_024,my_uv), re*2, ret.x);
comp_27=`ret = lerp( re, 1-re, ret.y);
comp_28=`//MilkDrop3 Color Mode:
comp_29=`ret /= float3(1.0,1.1,0.7);
comp_30=`//MilkDrop3 Shadows Mode:
comp_31=`ret += pow(tex2D(sampler_main,float2(uv.x,1-uv.y)).yyy+tex2D(sampler_main,1-uv).yyy,float3(10,2,3));
comp_32=`}
[PRESET1_END]

[PRESET2_BEGIN]
NAME=martin - the early universe - Milkdrop2077 rmx3d
MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=6
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=2.579
fWaveSmoothing=0.000
fWaveParam=-0.000
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.600
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.000
ib_r=0.600
ib_g=0.600
ib_b=0.600
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=2.500
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=0.400
b3x=0.400
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=1.07408
wavecode_0_smoothing=0.00000
wavecode_0_r=0.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.950
wave_0_init1=n=0; loop (20000,n[]=rand(1);n+=1);
wave_0_per_frame1= t1=0;
wave_0_per_point1=i=t1*10;
wave_0_per_point2=z=gmem[i+2]+reg30;
wave_0_per_point3=x=gmem[i]/z*reg30+0.5;
wave_0_per_point4=y=gmem[i+1]/z*reg30+0.5;
wave_0_per_point5=
wave_0_per_point6=r=sigmoid (2.5,gmem[i]);
wave_0_per_point7=g=sigmoid (2.6,gmem[i+1]);
wave_0_per_point8=b=sigmoid (2.5,gmem[i+2]);
wave_0_per_point9=
wave_0_per_point10=a=min(1,reg03*gmem[i+7]/reg20)*sqrt(1-gmem[i+7]/reg20)*reg04;
wave_0_per_point11=if ((x<q28) || (x>q29) || (y<q30) || (y>q31) || (z<0), gmem[i+7]=-1, 0);
wave_0_per_point12=t1+=1;
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=9.71091
wavecode_1_smoothing=0.00000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=0.500
wave_1_per_frame1=t1=512; 
wave_1_per_point1=i=t1*10;
wave_1_per_point2=z=gmem[i+2]+reg30;
wave_1_per_point3=x=gmem[i]/z*reg30+0.5;
wave_1_per_point4=y=gmem[i+1]/z*reg30+0.5;
wave_1_per_point5=
wave_1_per_point6=r=sigmoid (3,gmem[i]+.05);
wave_1_per_point7=g=sigmoid (3,gmem[i+1]+.05);
wave_1_per_point8=b=sigmoid (2.7,gmem[i+2]+.05);
wave_1_per_point9=
wave_1_per_point10=a=min(1,reg03*gmem[i+7]/reg20)*sqrt(1-gmem[i+7]/reg20)*(1-0.5* (t1%2))*reg04;
wave_1_per_point11=if ((x<q28) || (x>q29) || (y<q30) || (y>q31) || (z<0), gmem[i+7]=-1, 0);
wave_1_per_point12=t1+=1;
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=0.89152
wavecode_2_smoothing=0.20000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.300
wave_2_per_frame1=t1=1024;
wave_2_per_point1=i=t1*10;
wave_2_per_point2=z=gmem[i+2]+reg30;
wave_2_per_point3=x=gmem[i]/z*reg30+0.5;
wave_2_per_point4=y=gmem[i+1]/z*reg30+0.5;
wave_2_per_point5=k=1-(t1%8==0)*0.6;
wave_2_per_point6=r=sigmoid (3.5,gmem[i])*k;
wave_2_per_point7=g=sigmoid (3.5,gmem[i+1])*k;
wave_2_per_point8=b=sigmoid (4,gmem[i+2])*k;
wave_2_per_point9=
wave_2_per_point10=a=min(1,reg03*gmem[i+7]/reg20)*sqrt(1-gmem[i+7]/reg20)*reg04;
wave_2_per_point11=if ((x<q28) || (x>q29) || (y<q30) || (y>q31) || (z<0), gmem[i+7]=-1, 0);
wave_2_per_point12=t1+=1;
wavecode_3_enabled=1
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=1
wavecode_3_scaling=1.81669
wavecode_3_smoothing=0.00000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=0.100
wave_3_per_frame1=t1=512*3;
wave_3_per_point1=i=t1*10;
wave_3_per_point2=z=gmem[i+2]+reg30;
wave_3_per_point3=x=gmem[i]/z*reg30+0.5;
wave_3_per_point4=y=gmem[i+1]/z*reg30+0.5;
wave_3_per_point5=
wave_3_per_point6=r=sigmoid (5,gmem[i]);
wave_3_per_point7=g=sigmoid (4,+gmem[i+1]);
wave_3_per_point8=b=sigmoid (5,gmem[i+2]);
wave_3_per_point9=
wave_3_per_point10=a=min(1,reg03*gmem[i+7]/reg20)*sqrt(1-gmem[i+7]/reg20)*reg04;
wave_3_per_point11=if ((x<q28) || (x>q29) || (y<q30) || (y>q31) || (z<0), gmem[i+7]=-1, 0);
wave_3_per_point12=t1+=1;
wavecode_4_enabled=1
wavecode_4_samples=512
wavecode_4_sep=0
wavecode_4_bSpectrum=1
wavecode_4_bUseDots=0
wavecode_4_bDrawThick=1
wavecode_4_bAdditive=0
wavecode_4_scaling=1.00000
wavecode_4_smoothing=0.00000
wavecode_4_r=1.000
wavecode_4_g=1.000
wavecode_4_b=1.000
wavecode_4_a=1.000
wave_4_per_point1=//q1 = state;
wave_4_per_point2=//q2 = basstime;
wave_4_per_point3=
wave_4_per_point4=q1 =0;
wave_4_per_point5=speed = 0.02*bass_att;
wave_4_per_point6=v = sample*80 + (value1*bass);
wave_4_per_point7=
wave_4_per_point8=//state 0 elipse
wave_4_per_point9=xs = xs + (equal(0,q1))*sin(v*0.1 + time)*speed;
wave_4_per_point10=ys = ys + (equal(0,q1))*cos(v*1.2 + time)*speed;
wave_4_per_point11=
wave_4_per_point12=x = 0.5 + 0.4*cos(xs*0.02 +0.1*time)*sin(time*2 + xs);
wave_4_per_point13=y = 0.5 + 0.4*cos(ys*0.02 + 0.2*time)*cos(time + xs);
wave_4_per_point14=
wave_4_per_point15=
wave_4_per_point16=r = r + 0.5*sin(time*5.52);
wave_4_per_point17=g = g + 0.5*sin(time*5.107);
wave_4_per_point18=b = g + 0.5*sin(time*5.359 + (-0.5-x)*(0.5-y));
wave_4_per_point19=
wave_4_per_point20=x = x*0.7 + 0.15;
wave_4_per_point21=y = y*0.7 + 0.15;
wave_4_per_point22=
wave_4_per_point23=xs = if(above(xs,1000),0 ,xs);
wave_4_per_point24=ys = if(above(ys,800),0 ,ys);
wavecode_5_enabled=1
wavecode_5_samples=512
wavecode_5_sep=0
wavecode_5_bSpectrum=1
wavecode_5_bUseDots=0
wavecode_5_bDrawThick=1
wavecode_5_bAdditive=0
wavecode_5_scaling=1.00000
wavecode_5_smoothing=0.00000
wavecode_5_r=1.000
wavecode_5_g=1.000
wavecode_5_b=1.000
wavecode_5_a=1.000
wave_5_per_point1=//q1 = state;
wave_5_per_point2=//q2 = basstime;
wave_5_per_point3=
wave_5_per_point4=q1 =0;
wave_5_per_point5=speed = 0.01*bass_att;
wave_5_per_point6=v = sample*100 + (value1*bass);
wave_5_per_point7=
wave_5_per_point8=//state 0 elipse
wave_5_per_point9=xs = xs + (equal(0,q1))*sin(v*0.1 + time)*speed;
wave_5_per_point10=ys = ys + (equal(0,q1))*cos(v*1.2 + time)*speed;
wave_5_per_point11=
wave_5_per_point12=x = 0.5 + 0.4*cos(xs*0.04 +0.1*time)*sin(time*2 + xs);
wave_5_per_point13=y = 0.5 + 0.4*cos(ys*0.02 + 0.2*time)*cos(time + xs);
wave_5_per_point14=
wave_5_per_point15=
wave_5_per_point16=r = r + 0.5*sin(time*5.0);
wave_5_per_point17=g = g + 0.5*sin(time*5.0);
wave_5_per_point18=b = g + 0.5*sin(time*5.5 + (-0.5-x)*(0.5-y));
wave_5_per_point19=
wave_5_per_point20=x = x*0.7 + 0.15;
wave_5_per_point21=y = y*0.7 + 0.15;
wave_5_per_point22=
wave_5_per_point23=xs = if(above(xs,1000),0 ,xs);
wave_5_per_point24=ys = if(above(ys,800),0 ,ys);
shapecode_0_enabled=1
shapecode_0_sides=16
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=30
shapecode_0_x=0.300
shapecode_0_y=0.700
shapecode_0_rad=0.09836
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.25489
shapecode_0_r=0.400
shapecode_0_g=0.400
shapecode_0_b=0.400
shapecode_0_a=0.100
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=1.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=i=(instance+4*512)*10;
shape_0_per_frame2=z=gmem[i+2]+reg30;
shape_0_per_frame3=x=gmem[i]/z*reg30+0.5;
shape_0_per_frame4=y=gmem[i+1]/z*reg30*q32+0.5;
shape_0_per_frame5=
shape_0_per_frame6=if (instance<16,
shape_0_per_frame7=  additive=0;
shape_0_per_frame8=  r=g=b=r2=g2=b2=0;
shape_0_per_frame9=  rad = min (0.01,0.003/z) * (z>0);
shape_0_per_frame10=,
shape_0_per_frame11=  additive=1;
shape_0_per_frame12=  r=r2=sigmoid (3,gmem[i]+.2);
shape_0_per_frame13=  g=g2=sigmoid (3,gmem[i+1]+.2);
shape_0_per_frame14=  b=b2=sigmoid (2.7,gmem[i+2]+.2);
shape_0_per_frame15=  rad = min (0.008,0.002/z) * (z>0);
shape_0_per_frame16=);
shape_0_per_frame17=a=min(1,4*reg03*gmem[i+7]/reg20)*sqrt(1-gmem[i+7]/reg20);
shape_0_per_frame18=a2=a/2;
shape_0_per_frame19=if ((x<0) || (x>1) || (y<0) || (y>1) || (z<0), gmem[i+7]=-1, 0);
shape_0_per_frame20=
shapecode_1_enabled=1
shapecode_1_sides=20
shapecode_1_additive=1
shapecode_1_thickOutline=1
shapecode_1_textured=0
shapecode_1_num_inst=444
shapecode_1_x=0.800
shapecode_1_y=0.500
shapecode_1_rad=0.12821
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=5.42791
shapecode_1_r=0.000
shapecode_1_g=0.000
shapecode_1_b=1.000
shapecode_1_a=0.200
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.500
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_init1=i=0;
shape_1_init2=loop (1024,
shape_1_init3=  z=rand(1)+.1;
shape_1_init4=  megabuf(i+2) = z;
shape_1_init5=  megabuf(i)  = (rand(1)-0.5)/z;
shape_1_init6=  megabuf(i+1)= (rand(1)-.5)/z;
shape_1_init7=i+=3;);
shape_1_per_frame1=i=instance;
shape_1_per_frame2=k1 = i/num_inst;
shape_1_per_frame3=zmax = 7;
shape_1_per_frame4=speed=.15;
shape_1_per_frame5=
shape_1_per_frame6=z=megabuf(3*i+2);
shape_1_per_frame7=x = megabuf(3*i)/z+.5;
shape_1_per_frame8=y = megabuf(3*i+1)/z*reg32+0.5;
shape_1_per_frame9=
shape_1_per_frame10=rad = .022/(z*zmax)*reg32 ;
shape_1_per_frame11=
shape_1_per_frame12=out=(x>1)||(x<0)||(y>1)||(y<0)||(z<0);
shape_1_per_frame13=if (out,
shape_1_per_frame14=  megabuf(3*i)= (rand(2)-1); //x
shape_1_per_frame15=  megabuf(3*i+1)=(rand(2)-1); //y
shape_1_per_frame16=  megabuf(3*i+2)=1;
shape_1_per_frame17=,
shape_1_per_frame18=  megabuf(i*3+2)-=speed/fps;
shape_1_per_frame19=);
shape_1_per_frame20=
shape_1_per_frame21=a=1-pow(z,4);
shape_1_per_frame22=a*=0.6;
per_frame_init_1=reg03=4; //early brightness
per_frame_init_2=maxage=12;  reg20=maxage;
per_frame_init_3=reg30 = .2 + 0.5*rand(1); //z0
per_frame_init_4=reg04 = 0.6; //wave bri
per_frame_init_5=res=16;
per_frame_init_6=tini=rand(1);
per_frame_init_7=nums=512*4+50;
per_frame_init_8=mpos=30000; //matrix start
per_frame_init_9=n = 0; loop (nums, 
per_frame_init_10=  arg = rand(12);
per_frame_init_11=  n[0]=.5*cos(arg);
per_frame_init_12=  n[1]=.5*sin(arg);
per_frame_init_13=  n[2]= rand(1)-.5;
per_frame_init_14=  n[3]=n[4]=n[5]=n[8]=0;
per_frame_init_15=  n[6]=rand(10);
per_frame_init_16=  n[7]=0;
per_frame_init_17=n +=10; );
per_frame_init_18=
per_frame_init_19=n=0; loop (res*res*res,mpos[n]=0;n+=1);
per_frame_1=dt=1/fps ;
per_frame_2=t0=time*0.0018+tini;
per_frame_3=
per_frame_4=d2=exp(-dt*1);
per_frame_5=d3=exp(-dt*0);
per_frame_6=d4=exp(-dt*2);
per_frame_7=
per_frame_8=if (frame%4==0, n=0; loop(res*res*res, mpos[n]*=d2; n+=1); ,0);
per_frame_9=
per_frame_10=s1=sin(t0*13)*2;  s2=sin(t0*11)*2;  s3=sin(t0*9)*2;
per_frame_11=s4=sin(t0*23)*8;  s5=sin(t0*29)*8;  s6=sin(t0*31)*8;
per_frame_12=s7=sin(t0*18)*6;  s8=sin(t0*15)*7;  
per_frame_13=reg05=sin(t0*5);
per_frame_14=ff = sqrt(300/nums)*(sin(t0*14)); 
per_frame_15=
per_frame_16=i=0;
per_frame_17=loop (nums,
per_frame_18=  if ((i[7]>maxage) || (gmem[i+7]<0),
per_frame_19=    i[0]=(rand(1)-0.5)*.75;
per_frame_20=    i[1]=(rand(1)-0.5)*.75;
per_frame_21=    i[2]=(rand(1)-0.5)*.75;;
per_frame_22=    i[6]=1-rand(1)*0.5; //ageing factor
per_frame_23=    i[7]=0; //age
per_frame_24=  ,0 );
per_frame_25=
per_frame_26=  ix=int(res*(.5+i[0])+.5);
per_frame_27=  iy=int(res*(.5+i[1])+.5);
per_frame_28=  iz=int(res*(.5+i[2])+.5);
per_frame_29=  index = max(0,min(res-1,ix))+res*(max(0,min(res-1,iy))+res*max(0,min(res-1,iz)));
per_frame_30=  if ((ix>=0) && (ix<res) && (iy>=0) && (iy<res) && (iz>=0) && (iz<res), 
per_frame_31=    mpos[index] +=1;
per_frame_32=  ,0);
per_frame_33=  
per_frame_34=  dens=sqrt(mpos[index])*(1-d2)*ff;
per_frame_35=  i[8]=i[8]*d4 + (1-d4)*dens;   
per_frame_36=
per_frame_37=  ilen=1/sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);
per_frame_38=  dx=i[0]*ilen;
per_frame_39=  dy=i[1]*ilen;
per_frame_40=  dz=i[2]*ilen;
per_frame_41=  fx= cos(   i[0]*s4 + i[1]*s5 + i[2]*s6+ ilen*s1)*(1+i[8]*dy);
per_frame_42=  fy= sin(s7+i[0]*s5 + i[1]*s6 + i[2]*s4+ ilen*s2)*(1+i[8]*dz);
per_frame_43=  fz= sin(s8+i[0]*s6 + i[1]*s4 + i[2]*s5+ ilen*s3)*(1+i[8]*dx);
per_frame_44=
per_frame_45=  i[3] = i[3]*d4+fx*(1-d4)*if(i<10*2048,.06,0.02);
per_frame_46=  i[4] = i[4]*d4+fy*(1-d4)*if(i<10*2048,.04,0.02);
per_frame_47=  i[5] = i[5]*d4+fz*(1-d4)*if(i<10*2048,.04,0.02);
per_frame_48=
per_frame_49=  i[0] = i[0]*d3+i[3]*dt;  
per_frame_50=  i[1] = i[1]*d3+i[4]*dt;  
per_frame_51=  i[2] = i[2]*d3+i[5]*dt;
per_frame_52=  i[7] += i[6]/fps;
per_frame_53=
per_frame_54=  gmem[i]  =i[0];    
per_frame_55=  gmem[i+1]=i[1];    
per_frame_56=  gmem[i+2]=i[2];
per_frame_57=  gmem[i+7]=i[7];
per_frame_58=i+=10);
per_frame_59=
per_frame_60=q32 = aspecty;
per_frame_61=q28 = -0.1; //xmin
per_frame_62=q29 = 1.1; //xmax 
per_frame_63=q30 = 0.5-0.55/q32; //ymin;
per_frame_64=q31 = 0.5+0.55/q32; //ymin;
per_frame_65=
per_frame_66=
per_frame_67=monitor = reg30;
per_pixel_1=zoom=1;
per_pixel_2=dx=dy=0.00; warp=0.0;
per_pixel_3=sx=sy=1;
per_pixel_4=rot= 0.0;
per_pixel_5=
per_pixel_6=
warp_1=`shader_body {
warp_2=`float3 noise = tex2D(sampler_noise_mq,uv_orig*8+rand_frame);
warp_3=`float k1=0.7;
warp_4=`ret = max(GetPixel(uv)*k1,GetBlur1(uv));
warp_5=`ret = ret*0.99-0.01*lum(GetBlur1(uv))*(noise.x>0.85);
warp_6=`
warp_7=`}
comp_1=`sampler sampler_pw_noise_lq;
comp_2=`float3 ret1;
comp_3=`float2 zz, uv0, uv1,uv2,uv3,uv4;
comp_4=`float smask;
comp_5=`
comp_6=`float aTan2(float y, float x) {float angle;	 float abs_y = abs(y);
comp_7=`if (x >= 0) {float r = (x - abs_y) / (x + abs_y); angle = 1-r;} 
comp_8=`else {float r = (x + abs_y) / (abs_y - x); angle = 3-r; }	
comp_9=`angle = angle * .25;
comp_10=`return y < 0 ? -angle : angle;}
comp_11=`
comp_12=`shader_body { ;
comp_13=`uv0 = uv;
comp_14=`uv1 = (uv-.5)*aspect.xy;
comp_15=`
comp_16=`uv1 = (uv - .5) * aspect.xy;    
comp_17=`float stars = 0; float dist, inten;
comp_18=`int n = 1;
comp_19=`int anz = 4;
comp_20=`while (n <= anz) {
comp_21=`  dist = (1-frac(1.0/anz*n+.10*time)) * (1-.2*rad);
comp_22=`  inten =  (1-dist);
comp_23=`  uv3 = (uv1+float2(q1,q2));
comp_24=`   uv4 = 64*dist*uv3;
comp_25=`  smask = (tex2D (sampler_pw_noise_lq,uv4/256)).g-.9;
comp_26=`  stars += max(stars,saturate(inten*(0.11/length(abs(frac(uv4)-0.47))*smask)));
comp_27=`n++;
comp_28=`}
comp_29=`uv2 = uv1 - float2(q5,q6);
comp_30=`float beat = (mid - 0.45) * (mid > 0.45)*3;
comp_31=`float flash = .01/(length(uv2))*min(3,pow(beat,1));
comp_32=`flash *= flash/(abs(frac(3*aTan2(uv2.x,uv2.y)+time*2)-.5));
comp_33=`ret1 = max(GetPixel(uv0)*2,GetBlur2(uv0)*2);
comp_34=`//ret = saturate(0.022/length(sin(uv3)))*float3(0.2,2.6,0.1); //MilkDrop2077 color mod
comp_35=`ret += saturate(pow(stars,2));
comp_36=`ret *= saturate(1-2*lum(ret1));
comp_37=`ret +=  ret1;
comp_38=`ret *= 1.3;
comp_39=`//ret += 2*saturate(flash)*float3(2.2,2.9,0.7); //MilkDrop2077 color mod
comp_40=`}
[PRESET2_END]

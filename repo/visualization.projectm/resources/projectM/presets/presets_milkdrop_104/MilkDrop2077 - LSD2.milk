MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.460
fDecay=0.935
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.500
nVideoEchoOrientation=2
nWaveMode=4
bAdditiveWaves=0
bWaveDots=1
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=1
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.012
fWaveSmoothing=0.900
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=1.000
fWarpScale=1.331
fZoomExponent=1.00000
fShader=1.000
zoom=0.99950
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.00900
sx=1.00000
sy=1.00000
wave_r=0.500
wave_g=0.400
wave_b=0.300
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.000
mv_r=0.390
mv_g=0.440
mv_b=0.900
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=0.300
wavecode_0_g=0.700
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_frame1=advance=advance+ 0.005;
wave_0_per_frame2=advance=if( above(advance,2) , 0, advance);
wave_0_per_frame3=t1=advance
wave_0_per_point1=s=sample*6.28;
wave_0_per_point2=
wave_0_per_point3=//plot random x position via function of sample pos;
wave_0_per_point4=xp=sin(s)+sin(s*0.34)+sin(s*24.3)+sin(s*13.8);
wave_0_per_point5=xp=xp*0.20;
wave_0_per_point6=
wave_0_per_point7=//plot random y position via function of sample pos;
wave_0_per_point8=yp=cos(s)+sin(s*0.24)+cos(s*17.4)+sin(s*37.7);
wave_0_per_point9=yp=yp*0.20;
wave_0_per_point10=
wave_0_per_point11=//plot random z position via function of sample pos;
wave_0_per_point12=zp=cos(s)+cos(s*5.24)+cos(s*47.4)+cos(s*27.7);
wave_0_per_point13=zp=zp*0.25;
wave_0_per_point14=
wave_0_per_point15=//pull stars toward screen
wave_0_per_point16=zp=zp + 1 - t1;
wave_0_per_point17=
wave_0_per_point18=//correct when below 0
wave_0_per_point19=zp=if( below(zp,0) , zp+2 , zp );
wave_0_per_point20=
wave_0_per_point21=//darken far stars
wave_0_per_point22=a=(1 - zp*0.5);
wave_0_per_point23=
wave_0_per_point24=zp=zp*0.7;
wave_0_per_point25=
wave_0_per_point26=x_screen=xp/zp + 0.5;
wave_0_per_point27=y_screen=yp/zp + 0.5;
wave_0_per_point28=
wave_0_per_point29=x=x_screen;
wave_0_per_point30=y=y_screen;
wave_0_per_point31=
wave_0_per_point32=r=1;
wave_0_per_point33=g=1;
wave_0_per_point34=b=1;
wave_0_per_point35=
wave_0_per_point36=
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_frame1=advance=advance+ 0.005;
wave_1_per_frame2=advance=if( above(advance,2) , 0, advance);
wave_1_per_frame3=t1=advance
wave_1_per_point1=s=sample*6.28;
wave_1_per_point2=
wave_1_per_point3=//plot random x position via function of sample pos;
wave_1_per_point4=xp=sin(s)+sin(s*0.34)+sin(s*24.3)+sin(s*13.8);
wave_1_per_point5=xp=xp*0.20;
wave_1_per_point6=
wave_1_per_point7=//plot random y position via function of sample pos;
wave_1_per_point8=yp=cos(s)+sin(s*0.24)+cos(s*17.4)+sin(s*37.7);
wave_1_per_point9=yp=yp*0.20;
wave_1_per_point10=
wave_1_per_point11=//plot random z position via function of sample pos;
wave_1_per_point12=zp=cos(s)+cos(s*5.24)+cos(s*47.4)+cos(s*27.7);
wave_1_per_point13=zp=zp*0.25;
wave_1_per_point14=
wave_1_per_point15=//pull stars toward screen
wave_1_per_point16=zp=zp + 1 - t1;
wave_1_per_point17=
wave_1_per_point18=//correct when below 0
wave_1_per_point19=zp=if( below(zp,0) , zp+2 , zp );
wave_1_per_point20=
wave_1_per_point21=//darken far stars
wave_1_per_point22=a=(1 - zp*0.5);
wave_1_per_point23=
wave_1_per_point24=zp=zp*0.7;
wave_1_per_point25=
wave_1_per_point26=x_screen=-xp/zp + 0.5;
wave_1_per_point27=y_screen=-yp/zp + 0.5;
wave_1_per_point28=
wave_1_per_point29=x=x_screen;
wave_1_per_point30=y=y_screen;
wave_1_per_point31=
wave_1_per_point32=r=1;
wave_1_per_point33=g=1;
wave_1_per_point34=b=1;
wave_1_per_point35=
wave_1_per_point36=
warp_1=`shader_body
warp_2=`{
warp_3=`    #define PI2 6.28318530718
warp_4=`    #define MAX_ITER 5
warp_5=`    #define INV_MAX_ITER 0.2  // 1.0/MAX_ITER
warp_6=`    
warp_7=`    const float time2 = time * 0.02;
warp_8=`    uv = uv_orig;
warp_9=`    
warp_10=`    // Pattern coordinates - optimized to remove fmod when not needed
warp_11=`    const float2 p = uv * PI2 - 250.0;
warp_12=`    float2 i = p;
warp_13=`    float c = 1.0;
warp_14=`    const float brightness = 0.005;
warp_15=`    const float invBrightness = 200.0;  // 1.0/brightness
warp_16=`    
warp_17=`    // Precompute time components
warp_18=`    const float t0 = time2;
warp_19=`    const float t1 = time2 + time;
warp_20=`    
warp_21=`    // Fractal iteration loop - unrolled and optimized
warp_22=`    for (int n = 0; n < MAX_ITER; n++) {
warp_23=`        const float t = t0 * (1.0 - (3.5 / (float(n)+1.0)));
warp_24=`        const float sin_t = sin(t);
warp_25=`        const float cos_t = cos(t);
warp_26=`        
warp_27=`        // Update i with optimized trig operations
warp_28=`        const float2 i_plus_t = i + time/2;
warp_29=`        const float2 i_minus_t = i - t;
warp_30=`        
warp_31=`        i.x = p.x + cos_t*cos(i_minus_t.x) - sin_t*sin(i_minus_t.x) 
warp_32=`                   + sin_t*cos(i_plus_t.y) + cos_t*sin(i_plus_t.y);
warp_33=`        i.y = p.y + sin_t*cos(i_minus_t.y) - cos_t*sin(i_minus_t.y) 
warp_34=`                   + cos_t*cos(i_plus_t.x) - sin_t*sin(i_plus_t.x);
warp_35=`        
warp_36=`        // Optimized denominator calculations
warp_37=`        const float sin_ixt = sin(i.x + t);
warp_38=`        const float cos_iyt = cos(i.y + t);
warp_39=`        const float denom = sin_ixt * invBrightness;
warp_40=`        const float denom2 = cos_iyt * invBrightness;
warp_41=`        
warp_42=`        // Optimized length calculation
warp_43=`        const float2 pd = float2(p.x/denom, p.y/denom2);
warp_44=`        c += rsqrt(dot(pd, pd));  // Faster than 1.0/length()
warp_45=`    }
warp_46=`    
warp_47=`    // Post-processing
warp_48=`    c *= INV_MAX_ITER;  // Faster than division
warp_49=`    c = 1.17 - pow(c, 1.4);
warp_50=`    const float3 colour = pow(abs(c), 8.0);
warp_51=`    ret = float4(colour, 1.0);
warp_52=`}
comp_1=`
comp_2=`shader_body {
comp_3=`
comp_4=`    //Don't drink and drive, take LSD and teleport
comp_5=`    ret = tex2D(sampler_main, uv).xyz;
comp_6=`    
comp_7=`    // Time-varying color using cosine waves
comp_8=`    float3 col = 0.8 + 0.5 * cos(time/5 + float3(uv.x, uv.y, uv.x) + float3(0, 2, 4));
comp_9=`    
comp_10=`    // Output final color mixing with the old frame
comp_11=`    ret = ret * 1.5/(bass_att) * float4(col, 1.0);
comp_12=`
comp_13=`}

MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.460
fDecay=0.935
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.500
nVideoEchoOrientation=2
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=1
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=3.200
fWaveScale=1.768
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=0.010
fWarpScale=0.009
fZoomExponent=1.00000
fShader=1.000
zoom=1.00000
rot=0.00000
cx=0.465
cy=0.500
dx=0.00000
dy=0.00000
warp=0.00960
sx=1.00000
sy=1.00000
wave_r=1.000
wave_g=1.000
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.123
ob_g=0.000
ob_b=0.100
ob_a=0.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=1.248
mv_dx=0.000
mv_dy=0.000
mv_l=5.000
mv_r=1.000
mv_g=1.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_frame1=advance=advance+ 0.003;
wave_0_per_frame2=advance=if( above(advance,2) , 0, advance);
wave_0_per_frame3=t1=advance
wave_0_per_point1=s = sample * 6.28;
wave_0_per_point2=
wave_0_per_point3=// Random x position (modified for more variation)
wave_0_per_point4=xp = sin(s) + sin(s*0.34) + sin(s*24.3) + sin(s*13.8) + sin(s*7.2);
wave_0_per_point5=xp = xp * 0.25;
wave_0_per_point6=
wave_0_per_point7=// Random y position (modified for more variation)
wave_0_per_point8=yp = cos(s) + sin(s*0.24) + cos(s*17.4) + sin(s*37.7) + cos(s*9.1);
wave_0_per_point9=yp = yp * 0.25;
wave_0_per_point10=
wave_0_per_point11=// Random z position (modified for depth variation)
wave_0_per_point12=zp = cos(s) + cos(s*5.24) + cos(s*47.4) + cos(s*27.7) + sin(s*12.3);
wave_0_per_point13=zp = zp * 0.3;
wave_0_per_point14=
wave_0_per_point15=// Pull stars toward screen
wave_0_per_point16=zp = zp + 1 - t1;
wave_0_per_point17=
wave_0_per_point18=// Correct when below 0
wave_0_per_point19=zp = if(below(zp, 0), zp + 2, zp);
wave_0_per_point20=
wave_0_per_point21=// Star size & brightness adjustment (bigger stars)
wave_0_per_point22=star_size = 0.8 + 0.4 * sin(s*5.0); // Varying star size
wave_0_per_point23=a = (1 - zp*3) * (0.8 + 0.4 * sin(s*3.0)); // Brighter stars
wave_0_per_point24=
wave_0_per_point25=zp = zp * 0.9;
wave_0_per_point26=
wave_0_per_point27=x_screen = -xp/zp + 0.5;
wave_0_per_point28=y_screen = -yp/zp + 0.5;
wave_0_per_point29=
wave_0_per_point30=// Random colors based on sample position
wave_0_per_point31=r = 0.7 + 0.3 * sin(s * 1.5 + 1.0);
wave_0_per_point32=g = 0.7 + 0.3 * sin(s * 2.0 + 2.0);
wave_0_per_point33=b = 0.7 + 0.3 * sin(s * 2.5 + 3.0);
wave_0_per_point34=
wave_0_per_point35=// Apply star size effect (makes stars appear bigger)
wave_0_per_point36=dist = sqrt((x - x_screen)*(x - x_screen) + (y - y_screen)*(y - y_screen));
wave_0_per_point37=brightness = 1.0;
wave_0_per_point38=
wave_0_per_point39=// Final color with brightness
wave_0_per_point40=r = r * brightness;
wave_0_per_point41=g = g * brightness;
wave_0_per_point42=b = b * brightness;
wave_0_per_point43=
wave_0_per_point44=x = x_screen;
wave_0_per_point45=y = y_screen;
warp_1=`shader_body
warp_2=`{
warp_3=`    //SHADER MILKDROP2077+AI
warp_4=`
warp_5=`    float3 col = float3(0,0,0);
warp_6=`    uv = (uv_orig - 0.5) * aspect.xy;
warp_7=`    
warp_8=`    const float FAR = 80.0;
warp_9=`    const int count = 70;
warp_10=`    const float T = time * 0.25;
warp_11=`    const float PI = 3.14159265359;
warp_12=`    const float TWO_PI = 6.28318530718;
warp_13=`    
warp_14=`    for(int i = 0; i < count; i++) {
warp_15=`        float v = float(i+1)/float(count);
warp_16=`        float fi = float(i);
warp_17=`        
warp_18=`        // Optimized random number generation
warp_19=`        float rnd = frac(fi/30.0 + (0.5+v*TWO_PI)*PI);
warp_20=`        float rnd2 = frac(rnd*100.0);
warp_21=`        float rnd3 = frac(rnd+rnd2);
warp_22=`        
warp_23=`        // Precompute common terms
warp_24=`        float angle1 = rnd*TWO_PI + v;
warp_25=`        float angle2 = rnd2*TWO_PI - v;
warp_26=`        float rnd_sum = rnd + rnd2;
warp_27=`        
warp_28=`        // Star position calculations (optimized trig)
warp_29=`        float x = cos(angle1) * (rnd + 1.0) * PI;
warp_30=`        float y = sin(angle2) * (rnd2 + rnd + 1.0) * PI;
warp_31=`        float z = frac(-T*(rnd_sum*0.5)*PI*(0.5+v)) * (0.001+v)*FAR;
warp_32=`        
warp_33=`        // Star rendering
warp_34=`        float z_inv = 1.0/z;  // Reciprocal for faster division
warp_35=`        float2 starPos = float2(x,y) * z_inv;
warp_36=`        float dist_sq = dot(uv-starPos, uv-starPos);  // Avoid sqrt with distance squared
warp_37=`        float s = clamp(lerp(0.001, 0.009, rnd2) * rsqrt(max(1e-8, dist_sq)), 0.0, 1.0);
warp_38=`        s *= smoothstep(v, 0.25, abs(z*0.0125));  // 1/FAR = 0.0125
warp_39=`        
warp_40=`        // Color accumulation (optimized)
warp_41=`        col += s * float3(rnd, rnd2, rnd3);
warp_42=`    }
warp_43=`    
warp_44=`    ret = float4(col, 1.0);
warp_45=`}
comp_1=`#define sat saturate
comp_2=`float glow, tmp, lamp, dist, bdist, b2dist, dist_c, smask;
comp_3=`float2 dz, uv1, uv3, uv4;
comp_4=`static const float3 CamPos = float3(q4,q5,q6);
comp_5=`static const float myzoom = q7,  res = 255, res2 = 64, tele = q16;
comp_6=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_7=`
comp_8=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
comp_9=`
comp_10=`float GetDist(float2 uvi) {float2 tmp; tmp = (tex2D (sampler_fc_main, uvi).gb); 
comp_11=`return 1.0078125-tmp.y -0.015625*tmp.x;} // = 1-(tmp.y + 1.0/res2*(tmp.x-.50));}
comp_12=`
comp_13=`float GetDistB(float2 uvi)  {return 1-GetBlur1(uvi).b;}
comp_14=`float3 screen3;
comp_15=`float3 lavcol (float t) {return saturate(float3(pow(t,1),pow(t,2.),pow(t,5)));}
comp_16=`
comp_17=`static float3 t = float3(q20,q23,q26);
comp_18=`static float3 s = float3(q21,q24,q27);
comp_19=`static float3 ts = -cross(s,t);
comp_20=`static float3 pos = float3 (1,1,1);
comp_21=`
comp_22=`float3 project (float dist) {  float z;
comp_23=`  z = 18*dist/mul(cross(ts,-t),screen3);
comp_24=`  return float3(mul(float2x3(ts,t),cross(pos,screen3))-z,-z);}
comp_25=`
comp_26=`shader_body {
comp_27=`screen3 = float3 ((uv-.5)*aspect.xy,tele*0+1);
comp_28=`float3 uv2 = project(.1);
comp_29=`float3 sky = sat(lavcol (1-(abs(.3/uv2.z))))-.8;
comp_30=`
comp_31=`bdist = min(GetDist(uv),GetDistB(uv));;
comp_32=`
comp_33=`sky *= sat(1*bdist-2);
comp_34=`ret = sat(lerp (1, sky, bdist));
comp_35=`
comp_36=`float struc = lerp(GetPixel(uv).r, GetBlur1((uv-5)/5+5).r,GetBlur1(uv).r-.8);
comp_37=`ret += lavcol(struc)*(.2-pow(bdist,1+5*mid_att));
comp_38=`//ret = struc;
comp_39=`ret*=2.5;
comp_40=`ret-=0.4;
comp_41=`}

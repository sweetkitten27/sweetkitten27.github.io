Created with MILKDROP 3.21 on 11/09/2023 at 00:03:46
https://twitter.com/MilkDrop2077

blending_pattern=plasma3
blending_progress=0.45
blending_direction=1
random_1=0.674255
random_2=0.149051
random_3=0.932520
random_4=0.060163
random_5=0.673171

[PRESET1_BEGIN]
NAME=martin - riding the wave3b
MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=6
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=2.579
fWaveSmoothing=0.000
fWaveParam=-0.000
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.600
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.100
ib_r=0.600
ib_g=0.600
ib_b=0.600
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=2.500
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=0.500
b3x=0.400
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.07408
wavecode_0_smoothing=0.00000
wavecode_0_r=0.000
wavecode_0_g=0.500
wavecode_0_b=1.000
wavecode_0_a=0.230
wave_0_per_frame1=t1 = 0; reg33=0; reg40 = 0;
wave_0_per_frame2=t3=sin(q5); t4=cos(q5);
wave_0_per_point1=ni = 256;
wave_0_per_point2=o=q7;
wave_0_per_point3=g=ni/2*sin(time*0.13);
wave_0_per_point4=i = max(0,(t1+g)%ni);
wave_0_per_point5=i2 =max(0,(ni-t1-1+g)%ni);
wave_0_per_point6=rx1 = gmegabuf ((i+o)%ni*8+5);
wave_0_per_point7=rx2 = gmegabuf ((i2+o)%ni*8+5);//mirrored
wave_0_per_point8=ry1 = gmegabuf (i*8+6);
wave_0_per_point9=ry2 = gmegabuf (i2*8+6);//mirrored
wave_0_per_point10=
wave_0_per_point11=x0 = (rx1-rx2);
wave_0_per_point12=y0 = (ry1+ry2);
wave_0_per_point13=
wave_0_per_point14=x1 = x0+sample*2-.5;
wave_0_per_point15=y1 = max(-10,y0);
wave_0_per_point16=
wave_0_per_point17=x= t4*x1+t3*y1+.5;
wave_0_per_point18=y=-t3*x1+t4*y1+.5 - reg34*1;
wave_0_per_point19=
wave_0_per_point20=if (t1==0,xo=x;yo=y,0);
wave_0_per_point21=reg40 += sqrt(sqr(x-xo)+sqr(y-yo)) * (abs(x-.5)<0.5);
wave_0_per_point22=xo=x; yo=y;
wave_0_per_point23=
wave_0_per_point24=reg33= max (reg33, exp (-2*(abs(x-.5)))*(y-0.5));
wave_0_per_point25=
wave_0_per_point26=s=sample*12+4.5;
wave_0_per_point27=r = 0.6 + 0.4*sin(s);
wave_0_per_point28=g = 0.6 + 0.4*sin(s+1);
wave_0_per_point29=b = 0.6 + 0.4*sin(s+2);
wave_0_per_point30=//a*=sin((sample-0.5)*1000)>-3.9;
wave_0_per_point31=t1 += 1;
wave_0_per_point32=
wave_0_per_point33=a*=min(1,1.5/reg41);
wavecode_1_enabled=1
wavecode_1_samples=192
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=1
wavecode_1_scaling=9.71091
wavecode_1_smoothing=0.00000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_frame1=t1=0; t3=sin(q5); t4=cos(q5);
wave_1_per_point1=ni = 256;
wave_1_per_point2=
wave_1_per_point3=g=ni/2*sin(time*0.19);
wave_1_per_point4=i = (t1+g)%ni;
wave_1_per_point5=i2 =(ni-t1-1+g)%ni;
wave_1_per_point6=rx1 = gmegabuf (i*8+5);
wave_1_per_point7=rx2 = gmegabuf (i2*8+5);//mirrored
wave_1_per_point8=ry1 = gmegabuf (i*8+6);
wave_1_per_point9=ry2 = gmegabuf (i2*8+6);//mirrored
wave_1_per_point10=
wave_1_per_point11=x0 = (rx1-rx2);
wave_1_per_point12=y0 = (ry1+ry2)-0.2;
wave_1_per_point13=
wave_1_per_point14=x1 = x0+sample*1.7-.5;
wave_1_per_point15=y1 = y0;
wave_1_per_point16=
wave_1_per_point17=
wave_1_per_point18=x= t4*x1+t3*y1+.5;
wave_1_per_point19=y=-t3*x1+t4*y1+.71;
wave_1_per_point20=
wave_1_per_point21=r = 0.6 + 0.3*sin(sample*12+2);
wave_1_per_point22=g = 0.6 + 0.3*sin(sample*12+1);
wave_1_per_point23=b = 0.6 + 0.3*sin(sample*12);
wave_1_per_point24=
wave_1_per_point25=t1 += 1;
per_frame_init_1=n = -10000; loop (20000, megabuf(n)=gmegabuf(n)=-.01; n +=1; );
per_frame_init_2=
per_frame_init_3=MINBPM = 70; MAXBPM = 220; num_res = 256; 
per_frame_init_4=index = 0;
per_frame_init_5=loop (num_res,
per_frame_init_6=  n = index*8;
per_frame_init_7=  BPM      = minbpm * pow(maxbpm/minbpm,index/(num_res-1));
per_frame_init_8=  megabuf(n) = BPM;
per_frame_init_9=  index += 1;
per_frame_init_10=);
per_frame_init_11=
per_frame_init_12=reg41=1; 
per_frame_1=dt = min (1/fps,0.1) ;
per_frame_2=dec_m = 1 - 4*dt; dec_s = 1 - dt*1.5;
per_frame_3=vol =  (bass+mid+treb)/3 ;
per_frame_4=vol_ = vol_*dec_m + (1-dec_m)*vol; exc = vol-vol_;
per_frame_5=excite = atan (exc*1)*1.25;
per_frame_6=index=0; ratio = log(maxbpm/minbpm); 
per_frame_7=loop (num_res,
per_frame_8=  n = index*8;
per_frame_9=  omega      =   megabuf(n) * 6.2832/60;
per_frame_10=  megabuf (n+1) *= 1-.5*dt; //damping
per_frame_11=  ECS = 4; 
per_frame_12=  loop (ECS,
per_frame_13=    megabuf (n+1) += (excite - sqr(omega)*megabuf(n + 2)) * dt/ECS;
per_frame_14=    megabuf (n+2) += megabuf(n+1) * dt/ECS);
per_frame_15=  bc  = megabuf(n+1);  
per_frame_16=  bs = megabuf(n+2)*omega; //2pi/60
per_frame_17=  quad     = sqrt (bc*bc+bs*bs) ;
per_frame_18=  megabuf (n+3) = megabuf(n+3) *dec_s +  quad* (1-dec_s);
per_frame_19=  megabuf (n+4) = megabuf(n+3); megabuf (n+5) = bc;  megabuf (n+6) = bs ;
per_frame_20=  index += 1;
per_frame_21=);
per_frame_22=reg41 = reg41*dec_s + (1-dec_s)*(max(0,reg40));
per_frame_23=n = 0; maxind = 0;
per_frame_24=loop (num_res,
per_frame_25=  scale = .33/reg41;
per_frame_26=  if (megabuf(n+3) > megabuf(maxind+3), maxind = n, 0);
per_frame_27=  gmegabuf(n+5) = megabuf(n+5) * scale;
per_frame_28=  gmegabuf(n+6) = megabuf(n+6) * scale;
per_frame_29=n+=8;);
per_frame_30=BPM = megabuf(maxind);
per_frame_31=
per_frame_32=fg = 0.5; Q=4; omega = 6.283*min(0.5,fg/fps); tcos = cos (omega); alpha = sin(omega)/(2*Q);
per_frame_33=b0=(1-tcos)/2; b1=1-tcos; b2=(1-tcos)/2; a0=1+alpha; a1=-2*tcos; a2=1-alpha;
per_frame_34=b0a0=b0/a0; b1a0=b1/a0; b2a0=b2/a0; a1a0=a1/a0; a2a0=a2/a0;
per_frame_35=
per_frame_36=Xa = reg33; LOa= b0a0*Xa + b1a0*in1a + b2a0*in2a - a1a0*ou1a - a2a0*ou2a;
per_frame_37=in2a =in1a; in1a =Xa; ou2a =ou1a;  ou1a =LOa; Xa =LOa;
per_frame_38=reg34 = xa;
per_frame_39=
per_frame_40=clk = (megabuf(maxind+5)*om)<0;
per_frame_41=om  = megabuf(maxind+5);
per_frame_42=idx += clk;
per_frame_43=if ((idx%20==0)&&clk, o=max(0,rand(40)-10),0);
per_frame_44=q7=o;
per_frame_45=
per_frame_46=q5=.40*sin(time/3)*sin(time/5);
per_frame_47=q10=megabuf(maxind+1);
per_frame_48=q32 = aspecty;
per_frame_49=reg42 = reg41*16/fps;
per_frame_50=rot = q5/fps;
per_frame_51=dy=(.007+reg34*.2)*reg42*0.5;
per_frame_52=
per_frame_53=monitor = reg41;
per_pixel_1=zoom=1+(.01+0.035*rad)*reg42*1.5;
per_pixel_2=
per_pixel_3=
warp_1=`sampler sampler_pw_noise_lq;
warp_2=`#define GP GetPixel
warp_3=`shader_body {
warp_4=`
warp_5=`float2 uv1=mul (uv-0.5, float2x2(cos(q5),-sin(q5),sin(q5),cos(q5)));
warp_6=`float k= saturate(abs(uv1.y)*3+.2);
warp_7=`float3 noise = tex2D(sampler_noise_lq,uv*min(8,1.5/k)+rand_frame)-0.5;
warp_8=`uv += noise.xy * 0.02*max(0,rand_preset.x-.4) *k;
warp_9=`noise = tex2D(sampler_pw_noise_lq,uv+rand_frame);
warp_10=`ret = GetPixel(uv)*0.985-0.008*(noise.z>0.86)* (frame%2);
warp_11=`
warp_12=`}
comp_1=`sampler sampler_pw_noise_lq;
comp_2=`float2 uv1,uv2,uv3,uv4,uv5,dz,uvw;
comp_3=`
comp_4=`shader_body
comp_5=`{
comp_6=`uv1=mul (uv-0.5, float2x2(cos(q5),-sin(q5),sin(q5),cos(q5)));
comp_7=`float z=1/(uv1.y);
comp_8=`float2 uv2 = float2 (uv1.x*z,z)*.25;
comp_9=`float2 water = tex2D(sampler_noise_mq,uv2/2+float2(0,time/2))/z;
comp_10=`
comp_11=`uvw= uv1*float2 (1,.5)+0.5+water*0.2*(z>0);
comp_12=`uvw = frac (uvw);
comp_13=`
comp_14=`ret = (GetPixel(uv) + GetBlur2(uv) * (0.75+abs(uv1.y)*3));
comp_15=`ret += saturate (1-2*lum(ret)) * pow(GetBlur1(uvw),2)*saturate(.4/z)*64*saturate(1-rad);
comp_16=`ret *= 1.1;
comp_17=`
comp_18=`uv=1-uv;
comp_19=`uv1=(uv-sin(q5/3))*aspect.xy;
comp_20=`uv3=(uv-tan(q5/3))*aspect.xy;
comp_21=`uv5=(uv-sin(q5/6))*aspect.xy;
comp_22=`ret += 0.005/length(uv1.x-0.3) + 0.005/length(uv3.x-0.5) + 0.005/length(uv5.x-0.4);
comp_23=`ret *=1.5;
comp_24=`ret -=0.07;
comp_25=`//MilkDrop3 Color Mode:
comp_26=`ret /= float3(-1.1,2.2,3-bass);
comp_27=`}
[PRESET1_END]

[PRESET2_BEGIN]
NAME=martin - blue haze - martin2016 fixed version
MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=3.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=3
bAdditiveWaves=1
bWaveDots=1
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.020
fWaveScale=0.509
fWaveSmoothing=0.090
fWaveParam=-0.000
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.800
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.200
wave_y=0.200
ob_size=0.105
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.010
ib_r=0.700
ib_g=0.000
ib_b=1.000
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.000
mv_r=1.000
mv_g=1.000
mv_b=0.900
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=0.700
b2x=0.400
b3x=0.500
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=0.42000
wavecode_0_smoothing=0.20000
wavecode_0_r=1.000
wavecode_0_g=0.400
wavecode_0_b=0.000
wavecode_0_a=0.190
wave_0_per_frame1=t1 = 0;
wave_0_per_point1=base = t1*reg01;
wave_0_per_point2=  z0 = max(0.1,gmegabuf(base+2));  
wave_0_per_point3=  x = gmegabuf(base) / z0 * reg05;
wave_0_per_point4=  y = gmegabuf(base+1) / z0 * reg05;
wave_0_per_point5=  r1 = sqrt(x*x+y*y);
wave_0_per_point6=  b = min(1,2*(y-z0));
wave_0_per_point7=  x += q10; y+= q11;;
wave_0_per_point8=
wave_0_per_point9=  a = gmegabuf(base+6) * max(0.1,1-z0) * max(0,1-r1*1.5)/2;;
wave_0_per_point10=t1 += 1;
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=0.600
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_frame1=t1 = 512;
wave_1_per_point1=base = t1*reg01;
wave_1_per_point2=  z0 = max(0.1,gmegabuf(base+2));  
wave_1_per_point3=  x = gmegabuf(base) / z0 * reg05;
wave_1_per_point4=  y = gmegabuf(base+1) / z0 * reg05;
wave_1_per_point5=  b = min(1,2*(y-z0));
wave_1_per_point6=  r1 = sqrt(x*x+y*y);
wave_1_per_point7=  x += q10; y+= q11;;
wave_1_per_point8=  
wave_1_per_point9=  a = gmegabuf(base+6) * max(0.1,1-z0) * max(0,1-r1);;
wave_1_per_point10=
wave_1_per_point11=t1 += 1;
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=0.700
wavecode_2_b=0.000
wavecode_2_a=0.320
wave_2_per_frame1=t1=512*2;
wave_2_per_point1=base = t1*reg01;
wave_2_per_point2=  z0 = max(0.1,gmegabuf(base+2));  
wave_2_per_point3=  x = gmegabuf(base) / z0 * reg05 ;
wave_2_per_point4=  y = gmegabuf(base+1) / z0 * reg05 ;;
wave_2_per_point5=  b = min(1,2*(y-z0));
wave_2_per_point6=  x += q10; y+= q11;;
wave_2_per_point7=  a = gmegabuf(base+6) * max(0.1,1-z0);
wave_2_per_point8=t1 += 1;
shapecode_0_enabled=1
shapecode_0_sides=10
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=4
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.06716
shapecode_0_ang=3.14159
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.64463
shapecode_0_r=0.400
shapecode_0_g=0.500
shapecode_0_b=1.000
shapecode_0_a=0.160
shapecode_0_r2=0.500
shapecode_0_g2=0.300
shapecode_0_b2=0.700
shapecode_0_a2=0.000
shapecode_0_border_r=0.300
shapecode_0_border_g=0.100
shapecode_0_border_b=0.600
shapecode_0_border_a=0.000
shape_0_per_frame1=
shape_0_per_frame2=a1 = 6.28*instance/num_inst;
shape_0_per_frame3=n1 = (instance%2)*6;
shape_0_per_frame4=
shape_0_per_frame5=  r1 = 0.009+gmegabuf(50000+n1)*0.06;
shape_0_per_frame6=  x = r1*sin(a1) + q10;
shape_0_per_frame7=  y = r1*cos(a1) * q32 + (q11-0.5)*q32 + 0.5;;
shape_0_per_frame8=rad = sqrt(r1)*0.9;
shape_0_per_frame9=b = min(1,rad*4);
shape_0_per_frame10=
shape_0_per_frame11=
per_frame_init_1=n = 0;
per_frame_init_2=loop (100000,megabuf(n)=0;gmegabuf(n)=0;n += 1;);
per_frame_init_3=
per_frame_init_4=//rand chain
per_frame_init_5=n = 90000; t=0; loop (5000, t+= (2+cos(n/21))/5; megabuf(n)= sin(t)*0.5; n+= 1);
per_frame_init_6=
per_frame_init_7=
per_frame_init_8=fov = 1; reg05 = fov;
per_frame_init_9=maxstrings = 150;
per_frame_init_10=maxssize   = 37; //Pkte pro String
per_frame_init_11=maxpts     = 1600;
per_frame_init_12=maxshapes  = 300;
per_frame_init_13=pfree = maxpts; //freie Pkte
per_frame_init_14=sfree = maxstrings;  //freie Strings
per_frame_init_15=
per_frame_init_16=recsize = 8; reg01 = recsize; //pro Punkt
per_frame_init_17=dist0 =  0.8; reg02 = dist0;
per_frame_init_18=pi=3.1416;
per_frame_init_19=
per_frame_init_20=
per_frame_init_21=//bei 0 starten die String-Inforecords
per_frame_init_22=//0 : Age
per_frame_init_23=//1 : start index
per_frame_init_24=//2 : Len
per_frame_init_25=//3: Alive
per_frame_init_26=//4,5,6: dx0,dy0,dz0
per_frame_init_27=
per_frame_init_28=//bei 5000 starten die Punkt-records
per_frame_init_29=//es folgen die ppstring Punkte; pro punkt
per_frame_init_30=  //0..2: Pos. x,y,z
per_frame_init_31=// ende pro punkt
per_frame_init_32=
per_frame_init_33=//2D-Records in gmegabuf
per_frame_init_34=  //0..2: Pos. x,y,z
per_frame_init_35=  //3: rad
per_frame_init_36=  //5: a
per_frame_init_37=  //6: mask
per_frame_init_38=
per_frame_init_39=//Shape-Records in gmegabuf, optional
per_frame_init_40=  //0..2: r0, theta, phi
per_frame_init_41=  //3: speed
per_frame_init_42=  //4,5,6: x,y,z
per_frame_init_43=  //
per_frame_init_44=sPtr = 0;
per_frame_init_45=r01 = rand(12);
per_frame_init_46=r02 = rand(12);
per_frame_1=dt = 1/fps;
per_frame_2=vol = sqrt (bass_att+mid_att+treb_att)/3; vol_ = vol_*0.9 + 0.1*vol; gf = 0.35*vol/maxssize;
per_frame_3=prog += vol*30*dt; 
per_frame_4=
per_frame_5=// Count sfree and pfree; pfree = len=0
per_frame_6=s = 0; sfree = maxstrings; pfree = maxpts;
per_frame_7=loop (maxstrings, ibase = s*recsize; if (megabuf(ibase+3) > 0, sfree -=1; pfree -=megabuf(ibase+2), 0); s+= 1);
per_frame_8=
per_frame_9=s = 0; loop (maxstrings, //NEW STRING ?
per_frame_10=  ibase = s*recsize;
per_frame_11=  if ((megabuf(ibase+3)==0) && (vol > vol_*1) && (rand(100) < 20),
per_frame_12=    sfree -= 1;
per_frame_13=    tht = rand(1)*(2.9 + (vol>vol_*1.7)); phi = (rand(1)-0.5)*4+pi/2;;
per_frame_14=    pbase = 5000 + (s*maxssize)*recsize; //erster Punkt startet bei 0
per_frame_15=    megabuf (ibase  ) = 0;//Age
per_frame_16=    megabuf (ibase+1) = 0;//start ind
per_frame_17=    megabuf (ibase+2) = 0;//len  
per_frame_18=    megabuf (ibase+3) = 1;// am Leben
per_frame_19=    megabuf (ibase+4) = sin(tht)*cos(phi);
per_frame_20=    megabuf (ibase+5) = sin(tht)*sin(phi);
per_frame_21=    megabuf (ibase+6) = -abs(cos(tht)); 
per_frame_22=  ,0); //END NEW STRING
per_frame_23=s+=1;);
per_frame_24=
per_frame_25=s = 0; loop (maxstrings, //GROW and SHRINK
per_frame_26=  ibase = s*recsize;
per_frame_27=  if (megabuf(ibase+3) > 0, //am Leben ?
per_frame_28=    megabuf(ibase  ) += dt*rand(2) ; //Age
per_frame_29=//EXPAND
per_frame_30=    age   = megabuf (ibase);
per_frame_31=    start = megabuf (ibase+1);
per_frame_32=    len   = megabuf (ibase+2);
per_frame_33=    newpts = int (5*vol*maxssize/40*(age < 0.7)) ; 
per_frame_34=    newpts = max (0, min (newpts, min (pfree,maxssize-start-len))); 
per_frame_35=    dx0 = megabuf (ibase+4);
per_frame_36=    dy0 = megabuf (ibase+5);
per_frame_37=    dz0 = megabuf (ibase+6);
per_frame_38=    p = start+len;
per_frame_39=    loop (newpts,
per_frame_40=      pbase  = 5000 + (p+s*maxssize)*recsize;
per_frame_41=k1 = if (s%3==0, p, (p-start-len)*16)+3+s/16;
per_frame_42=if (frame%5==0,k1 = 20*vol,0);
per_frame_43=//k1 = max(k1,p);
per_frame_44=      megabuf (pbase) = k1*dx0*gf; megabuf (pbase+1) = k1*dy0*gf; megabuf (pbase+2) = k1*dz0*gf;      
per_frame_45=      p+=1; ); 
per_frame_46=    megabuf(ibase +2) += newpts;  len   = megabuf (ibase+2);  pfree -= newpts;
per_frame_47=//SHRINK
per_frame_48=    ivol = if (vol<0.35,3, if (vol<0.5,2,1));
per_frame_49=    delpts = min ((megabuf(ibase)>.7),len) * (frame%ivol==0);
per_frame_50=    megabuf(ibase+1) = (megabuf(ibase+1)+delpts); 
per_frame_51=    megabuf(ibase+2) -= delpts;  pfree += delpts;
per_frame_52=    if (megabuf(ibase+2) <= 0, megabuf(ibase+3)=0, 0);
per_frame_53=  ,0);
per_frame_54=s+=1);
per_frame_55=
per_frame_56=//MOVE
per_frame_57=s = 0; loop (maxstrings,
per_frame_58=  ibase = s*recsize;  start = megabuf (ibase+1); len = megabuf (ibase+2);
per_frame_59=  if (len > 0, 
per_frame_60=    p=start; i=0;
per_frame_61=    loop (len,
per_frame_62=      pbase  = 5000 + (p%maxssize+s*maxssize)*recsize;
per_frame_63=      scale = pow(i/len,2)*0.005 ;
per_frame_64=      r1 = pow(megabuf(pbase),2)+pow(megabuf(pbase+1),2)+pow(megabuf(pbase+2),2);
per_frame_65=      scale *= min(sqrt(r1)*10,1) ; //##mit vol skalieren
per_frame_66=      p1 = 5000-int(3*p+prog);
per_frame_67=      megabuf (pbase)   += megabuf(90000+(p1+s*57)%5000)*scale;      
per_frame_68=      megabuf (pbase+1) += megabuf(90000+(p1+s*91)%5000)*scale;      
per_frame_69=      megabuf (pbase+2) += megabuf(90000+(p1+s*113)%5000)*scale;       
per_frame_70=      p+=1; i+=1;   ); 
per_frame_71=
per_frame_72=//STRAIGHTEN
per_frame_73=    p=start+1; smooth = 8;
per_frame_74=    sz = 1/(1.93+smooth);
per_frame_75=    loop (len-2,
per_frame_76=      pbase  =  5000 + (p    +s*maxssize)*recsize;
per_frame_77=      pbase1  = 5000 + ((p-1)+s*maxssize)*recsize;
per_frame_78=      pbase2  = 5000 + ((p+1)+s*maxssize)*recsize;
per_frame_79=      megabuf (pbase  ) = (smooth*megabuf(pbase  ) +megabuf(pbase1  )+megabuf(pbase2 ))*sz;      
per_frame_80=      megabuf (pbase+1) = (smooth*megabuf(pbase+1) +megabuf(pbase1+1)+megabuf(pbase2+1))*sz;      
per_frame_81=      megabuf (pbase+2) = (smooth*megabuf(pbase+2) +megabuf(pbase1+2)+megabuf(pbase2+2))*sz;      
per_frame_82=     p+=1; ); 
per_frame_83=
per_frame_84=  ,0);
per_frame_85=s+=1);
per_frame_86=
per_frame_87=//Projektion waves
per_frame_88=n=0; loop (maxpts, gmegabuf(n+6)=0; n+=recsize); 
per_frame_89=s = 0; i = 0;
per_frame_90=loop (maxstrings,
per_frame_91=  ibase = s*recsize;
per_frame_92=  start = megabuf (ibase+1);
per_frame_93=  len   = megabuf (ibase+2);
per_frame_94=  p = start;  j=0;
per_frame_95=//  if (len==0, len=-1, 0);
per_frame_96=  loop (len+1, //ersten Pkt verdoppeln wegen waves
per_frame_97=    pbase = 5000 + (p%maxssize + s*maxssize)*recsize;
per_frame_98=    z    = megabuf (pbase+2)+dist0;
per_frame_99=    gmegabuf (i*recsize)   = megabuf(pbase  );    
per_frame_100=    gmegabuf (i*recsize+1) = megabuf(pbase+1);    
per_frame_101=    gmegabuf (i*recsize+2) = z;    
per_frame_102=    gmegabuf (i*recsize+3) = if (z>0, 0.007/z, 0) ;    //rad
per_frame_103=    gmegabuf (i*recsize+5) = 1; //a
per_frame_104=    gmegabuf (i*recsize+6) = (z>0.1)*(j>1) * (j<len-1); //mask
per_frame_105=    if (j>1, p += 1,0);  i += 1; j+=1;
per_frame_106=  );  
per_frame_107=  s+=1;
per_frame_108=);
per_frame_109=
per_frame_110=//Vol delay chain 
per_frame_111=tvol = tvol*0.8 + 0.2*(vol-vol_);
per_frame_112=n = 50030; loop (30, gmegabuf (n) = gmegabuf (n-1); n -= 1; ); gmegabuf (50000) = tvol;
per_frame_113=
per_frame_114=
per_frame_115=dec = if (vol>pvol,0.5, 1-dt*40*0.05);
per_frame_116=pvol = pvol*dec + vol*(1-dec);
per_frame_117=q1 = pvol;
per_frame_118=
per_frame_119=//Zentrum
per_frame_120=q10 = 0.5; 
per_frame_121=q11 = 0.38;
per_frame_122=q32 = aspecty;
per_frame_123=
per_frame_124=q3 = gmegabuf(50000)+1; 
per_frame_125=q4 = gmegabuf(50005)+1; 
per_frame_126=
per_frame_127=//planet pos
per_frame_128=t1 = time/12 +r01;
per_frame_129=q15 = 0.5-0.35*sin(t1);
per_frame_130=q16 = 0.5- (0.05+0.24*cos(t1) * (0.7+0.3*sin(t1/7))); 
per_frame_131=
per_frame_132=q8 = (1.7+sin(time*.02+r02))*.16;
per_frame_133=q9 = (1.7+sin(time*.0157-r02))*.16;
per_frame_134=
per_frame_135=bal = min(0.85,max(0.15,bal+ dt*0.1 * atan(treb -bass - (bal-0.5)*0.1)));
per_frame_136=q12 = bal;
per_frame_137=
per_frame_138=monitor = q12;
warp_1=`static const float2 centre = float2 (q10-0.5,-(q11-0.5))/aspect.xy+0.5;
warp_2=`
warp_3=`shader_body {
warp_4=`ret = lerp(GetPixel(uv),GetBlur1(uv),0.2)*0.75;
warp_5=`float2 uv2 = uv-centre+0.5;
warp_6=`       uv2 = float2 (1-uv2.x,uv2.y)-0.5;
warp_7=`uv2 = (uv2)*0.8 + centre;
warp_8=`ret = max (ret, lerp(GetPixel(uv2),GetBlur1(uv2),0.4)*0.55);
warp_9=`
warp_10=`ret = ret* (1-pow(rad,2)*1) - 0.002;
warp_11=`
warp_12=`}
comp_1=`#define sat saturate
comp_2=`float3 struc;
comp_3=`float2 uvc, rs, uv1, uv2,uv3, uv4, prof,prof2;
comp_4=`float rad1, mask, ir0, k1, omask, z;
comp_5=`static const float2 centre = float2 (q10-0.5,-(q11-0.5));
comp_6=`static const float2 pos = float2 (q15,q16);
comp_7=`static const float2 hor = texsize.zw*float2 (1,0);
comp_8=`static const float blue = rand_preset.y/2;;
comp_9=`float3 lavcol (float t){return smoothstep(0,0.8,pow (t,float3(1,2,4)));}
comp_10=`
comp_11=`float2 noise3 (float2 uvi) {
comp_12=`  return (tex2D(sampler_noise_mq,uvi)
comp_13=`         +tex2D(sampler_noise_mq,uvi*2)/2  
comp_14=`         +tex2D(sampler_noise_mq,uvi*4)/4
comp_15=`         +pow(tex2D(sampler_noise_mq,uvi*8+time*0.01),2)/4-0.8); }
comp_16=`
comp_17=`float3 project (float2 uvi) {float z;
comp_18=`  z = clamp(1/uvi.y,-16,16); return float3 (z*(uvi.x-0.5),z-2,z);}
comp_19=`
comp_20=`shader_body {
comp_21=`uvc = (uv-0.5) * aspect.xy + 0.5 -centre;
comp_22=`omask = saturate (15*(0.55-uvc.y));
comp_23=`uv2 = project (uvc) * float2(1,1.5);
comp_24=`float2 ring = (tex2D(sampler_noise_mq,-time/16+length(uv2)/2)-0.5).xy*sat(1-length(uv2));
comp_25=`uv += ring.xy *(1-omask)*.02;
comp_26=`
comp_27=`float3 retl = max(GetPixel(uv-hor),GetPixel(uv-hor.yx));
comp_28=`float3 retr = GetPixel(uv+hor);
comp_29=`float3 rets = max (retl,retr)*min(0.3+rad*2,1);
comp_30=`struc = max(max(GetPixel(uv),rets)*float3(2,2,.7+1-2*blue)*1.3,GetBlur2(uv)*q1*3);
comp_31=`ret = struc; 
comp_32=`
comp_33=`uv3 = (ring.x*0.2+ (uv2-0)*.25 +0.5+centre/aspect.xy);
comp_34=`uv3 = frac(uv3);
comp_35=`ret += GetBlur1(uv3)*sat(2-length(uv2));
comp_36=`
comp_37=`//Planet
comp_38=`ir0 = 24*(.15/(pos.y-0.1))/aspect.y;
comp_39=`uv1 = (uvc-pos);
comp_40=`k1 = sqrt(abs(1-ir0*ir0*uv1.y*uv1.y)+0.0); //sollte sqrt sein, 0.01 = test
comp_41=`rs = float2 (acos(uv1.x*ir0/k1), uv1.y*ir0/k1);
comp_42=`mask = ir0*length(uv1)<1;
comp_43=`rs = rs/14+float2(time*-0.007,0);
comp_44=`prof  = noise3(rs);
comp_45=`prof2 = noise3(rs+texsize.zw);
comp_46=`float hmask = sat(4-8*pos.y);
comp_47=`
comp_48=`ret *= !mask;
comp_49=`ret += struc*mask*hmask; //struc vor dem Planeten zeigen
comp_50=`
comp_51=`uv4 = ((uvc-0.5)*.1 +0.5+centre/aspect.xy);
comp_52=`ret += sat (-dot (uv1,uvc-0.5))*mask*hmask*140*GetBlur1(uv4);
comp_53=`
comp_54=`ret += ((-uv1.y/ir0*20)*float3(0,0.4,0.9)+lavcol(sat(prof)*pow(k1,4)))*mask;
comp_55=`ret += -mask * sat (dot(-prof+prof2,uv1))*50;
comp_56=`
comp_57=`ret += tex2D(sampler_noise_hq,uv2/4+ring.x*0.1).r*blue* !mask*sat(1.3-length(uv2)) * float3(0.2,0,1);
comp_58=`
comp_59=`
comp_60=`z = 1/(2-uv.y) ;
comp_61=`uv3 = float2(uvc.x-.5,1)*z*float2(q8,q9)+float2(0,time*0.005);
comp_62=`uv3.y -= noise3(uv3).r*-0.008;
comp_63=`uv4 = ((uvc-float2 (q12,0.3))*.4 +0.5+centre/aspect.xy);
comp_64=`ret += !mask*saturate(1-2*uvc.y)*2*saturate(noise3(uv3).r*GetBlur2(uv4)+float3(0,0.1,0.25));
comp_65=`//MilkDrop3 Color Mode:
comp_66=`ret /= float3(0.7,0.7,1.9);
comp_67=`ret*=2.5;
comp_68=`}
[PRESET2_END]

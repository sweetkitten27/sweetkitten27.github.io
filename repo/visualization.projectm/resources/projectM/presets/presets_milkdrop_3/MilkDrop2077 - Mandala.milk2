Created with MILKDROP 3.25 on 02/03/2024 at 11:32:21
https://twitter.com/MilkDrop2077

sprite=1
blending_pattern=side
blending_progress=0.55
blending_direction=1
random_1=0.587534
random_2=0.838889
random_3=0.601897
random_4=0.686721
random_5=0.118293

[PRESET1_BEGIN]
NAME=martin - frosty caves 2
MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=2
[preset00]
fRating=5.000
fGammaAdj=1.070
fDecay=0.955
fVideoEchoZoom=100.000
fVideoEchoAlpha=0.650
nVideoEchoOrientation=0
nWaveMode=0
bAdditiveWaves=0
bWaveDots=1
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=100.000
fWaveScale=28.599
fWaveSmoothing=0.500
fWaveParam=-0.950
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=0.950
fWarpScale=1.331
fZoomExponent=1.00000
fShader=0.000
zoom=1.42951
rot=0.00000
cx=0.500
cy=0.420
dx=0.00000
dy=0.00000
warp=97.85384
sx=1.00000
sy=1.00000
wave_r=1.190
wave_g=1.000
wave_b=1.090
wave_x=0.480
wave_y=0.425
ob_size=0.000
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.850
ib_size=0.341
ib_r=0.250
ib_g=0.235
ib_b=0.250
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=8.190
mv_dx=0.000
mv_dy=0.000
mv_l=1.500
mv_r=0.000
mv_g=0.000
mv_b=0.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
shapecode_0_enabled=1
shapecode_0_sides=100
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.40031
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=1.00000
shapecode_0_r=0.505
shapecode_0_g=0.500
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.455
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=0.500
shapecode_0_border_a=0.000
shape_0_per_frame1=sounds=(bass+treb+mid)/3;
shape_0_per_frame2=
shape_0_per_frame3=rad=rad*sounds*0.6;
shape_0_per_frame4=
shape_0_per_frame5=r=r+sin(bass)*g;
shape_0_per_frame6=g=g+sin(mid)*g;
shape_0_per_frame7=
shape_0_per_frame8=
shape_0_per_frame9=x=x+0.207*cos(time*bass*0.1);
shape_0_per_frame10=y=y+0.207*sin(time*bass*0.1);
shapecode_1_enabled=1
shapecode_1_sides=100
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.525
shapecode_1_y=0.500
shapecode_1_rad=0.15754
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=0.000
shapecode_1_a2=0.282
shapecode_1_border_r=0.830
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=
shape_1_per_frame2=g2=g2+0.077*sin((treb+mid)*1.033);
shape_1_per_frame3=g=g+0.09*cos((bass+mid)*1.37);
shape_1_per_frame4=
shape_1_per_frame5=sounds=(bass+mid+treb)/3;
shape_1_per_frame6=
shape_1_per_frame7=rad=rad*(treb+mid)/3;
shape_1_per_frame8=
shape_1_per_frame9=x=x+0.300*sin(time*bass);
shape_1_per_frame10=y=y+0.317*cos(time*bass);
shapecode_2_enabled=1
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.20047
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=0.97000
shapecode_2_r=0.830
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=0.960
shapecode_2_r2=0.560
shapecode_2_g2=0.500
shapecode_2_b2=0.860
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=0.500
shapecode_2_border_a=0.000
shape_2_per_frame1=sounds=(bass+treb+mid)/3;
shape_2_per_frame2=att=(bass_att+treb_att+mid_att)/3;
shape_2_per_frame3=att=(bass_att+treb_att+mid_att)/3;
shape_2_per_frame4=r2=r2+(0.225*sin(time*5.464))-bass;
shape_2_per_frame5=g2=g2+(0.25*sin(time*6.28))-bass;
shape_2_per_frame6=
shape_2_per_frame7=rad=rad;
shape_2_per_frame8=x=x+0.217*cos(time*2.3)+sounds*0.1;
shape_2_per_frame9=y=y+0.2127*sin((time*3.64)+(sounds*0.32));
per_frame_1=warp = 0;
per_frame_2=
per_frame_3=tic = min(time-tin,.1);
per_frame_4=tin = time;
per_frame_5=
per_frame_6=vol = (bass_att + treb_att + mid_att)*.333333;
per_frame_7=
per_frame_8=ra = 1/tic*.25;
per_frame_9=
per_frame_10=treb_avg = tic*(treb_avg*(1/tic - ra) + ra*treb);
per_frame_11=mid_avg = tic*(mid_avg*(1/tic - ra) + ra*mid);
per_frame_12=bass_avg = tic*(bass_avg*(1/tic - ra) + ra*bass);
per_frame_13=vav = tic*(vav*(1/tic - ra) + ra*(bass+treb+mid)*.33333);
per_frame_14=
per_frame_15=tt = tt + tic*treb;
per_frame_16=mt = mt + tic*mid;
per_frame_17=bt = bt + tic*bass;
per_frame_18=vt = vt + tic*vav;
per_frame_19=
per_frame_20=sp = abs(vav - slide)*.1;
per_frame_21=slide = if(above(slide,vav),slide-tic*sp,slide+tic*sp) + (1-toc)*vav*.2;
per_frame_22=toc = 1;
per_frame_23=
per_frame_24=
per_frame_25=//dx = (treb_avg - mid_avg)*0.12;
per_frame_26=//dy = (bass_avg - treb_avg)*.1;
per_frame_27=
per_frame_28=q1 = treb_avg;
per_frame_29=q2 = mid_avg;
per_frame_30=q3 = bass_avg;
per_frame_31=
per_frame_32=q4 = (tt + mt)*0.61;
per_frame_33=q5 = bt;
per_pixel_1=zoom = 1 + pow(sin(ang*5 - q5),1)*0.038*bass;
per_pixel_2=rot = .02*sin(rad*6.2832*2 - q4*4)*(mid + treb)*.5;
warp_1=`float sigmoid(float t, float c){
warp_2=`   return 1 / ( 1 + exp(t*c));
warp_3=`}
warp_4=`
warp_5=`float2 vortex(float2 domain, float2 position, float2 motionVector, float4 domainAspect, float radius, float sharpness, float spin, float zoom){
warp_6=`   domain -= position;
warp_7=`   domain *= domainAspect.xy;
warp_8=`   float sigmoidFilter = sigmoid( length(domain) - radius , sharpness );
warp_9=`   domain +=  + motionVector*sigmoidFilter;
warp_10=`   spin *= sigmoidFilter;
warp_11=`   float s = sin(spin);
warp_12=`   float c = cos(spin);
warp_13=`   float2 uv_rot;
warp_14=`   uv_rot.x = c*domain.x - s*domain.y;
warp_15=`   uv_rot.y = s*domain.x + c*domain.y;
warp_16=`   uv_rot *= domainAspect.zw;
warp_17=`   uv_rot += position;
warp_18=`   return saturate(position + (uv_rot-position)*lerp(1,zoom,sigmoidFilter));
warp_19=`}
warp_20=`
warp_21=`shader_body
warp_22=`{
warp_23=`
warp_24=`
warp_25=`float2 domain = uv;
warp_26=`float2 position = float2(q4,1-q8) + 0.49*0;
warp_27=`float2 motionVector = float2(-q15,q16)*q13*aspect.wz;
warp_28=`float4 domainAspect = aspect;
warp_29=`float radius = 0.07;
warp_30=`float sharpness = 50;
warp_31=`float spin = 1;
warp_32=`float zoom = 4;
warp_33=`
warp_34=`float2 uv_vortex = vortex( domain, position, motionVector, domainAspect, radius, sharpness, spin, zoom);
warp_35=`
warp_36=`uv = uv_vortex + texsize.zw*float2(0,0.15);
warp_37=`uv = lerp( uv_orig,uv,0.2);
warp_38=`
warp_39=`    float2 scale = float2(1280,1024)*texsize.zw; // 1280x1024 : the resolution i modelled this shader with
warp_40=`    float1 d = 0.0039;
warp_41=`    float1 dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;
warp_42=`    float1 dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;
warp_43=`    float1 dxb = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).x*scale.x;
warp_44=`    float1 dyb = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).x*scale.y;
warp_45=`    float2 my_uv = uv - float2(dx,dy)*0.0068 + float2(dxb,dyb)*0.0031;
warp_46=`
warp_47=`
warp_48=`
warp_49=`    float2 v = 0.008;
warp_50=`    ret.x = tex2D( sampler_fw_main, my_uv).x;
warp_51=`
warp_52=`    
warp_53=`    ret.x += (ret.x - GetBlur3(uv).x)*0.11;
warp_54=`    ret.x += 0.0041;
warp_55=`
warp_56=`
warp_57=`//--------------------------------
warp_58=`
warp_59=`    my_uv = uv_orig + float2(dy,-dx)*0.058*(1.01-GetBlur3(uv_orig).y);
warp_60=`
warp_61=`
warp_62=`
warp_63=`    v = 0.009;
warp_64=`    ret.z = tex2D( sampler_fw_main, my_uv).z;
warp_65=`    
warp_66=`    ret.z += (ret.z - GetBlur1(uv_orig).z)*length(my_uv-uv_orig)*180/length(scale);
warp_67=`    ret.z *= 0.646;
warp_68=`    ret.z += 0.0076;
warp_69=`
warp_70=`
warp_71=`
warp_72=`//--------------------------------
warp_73=`
warp_74=`    d = 0.009;
warp_75=`    my_uv = float2(-dy,dx)*0.0355;
warp_76=`
warp_77=`    dx = ( GetBlur2(uv + float2(d,0)) - GetBlur2(uv-float2(d,0)) ).y*scale.x;
warp_78=`    dy = ( GetBlur2(uv + float2(0,d)) - GetBlur2(uv-float2(0,d)) ).y*scale.y;
warp_79=`    my_uv += uv - float2(dx,dy)*0.025;
warp_80=`
warp_81=`
warp_82=`
warp_83=`    v = 0.012;
warp_84=`    ret.y =tex2D( sampler_fw_main, my_uv).y;
warp_85=`
warp_86=`    
warp_87=`    ret.y += (ret.y - GetBlur3(my_uv).y)*.11 + 0.034;
warp_88=`}
comp_1=`sampler sampler_MilkDrop3_002;
comp_2=`sampler sampler_MilkDrop3_003;
comp_3=`
comp_4=`shader_body
comp_5=`{
comp_6=`
comp_7=`
comp_8=`    float2 d = texsize.zw*12;
comp_9=`    float3 dx = ( GetBlur1(uv + float2(1,0)*d) - GetBlur1(uv-float2(1,0)*d) );
comp_10=`    float3 dy = ( GetBlur1(uv + float2(0,1)*d) - GetBlur1(uv-float2(0,1)*d) );
comp_11=`    float2 my_uv = uv + float2(dx.y,dy.y)*0.1;
comp_12=`
comp_13=`float3 re;
comp_14=`
comp_15=`//uv = uv + 0.02*float2(cos(uv.y*27),sin(uv.x*39));
comp_16=`float2 m = float2(1-q4,q8);
comp_17=`float2 bg_uv = m + (uv-m)*0.992; // subtle 3D shadow drop
comp_18=`float2 mid_uv = m + (uv-m)*0.996;
comp_19=`ret = lerp( float3(0,0,0.2), float3(0.3,0,1),tex2D( sampler_fw_main, bg_uv).y);
comp_20=`ret = lerp(ret, float3(1,1,0), max(GetBlur1(bg_uv).z*1.5,tex2D( sampler_main, mid_uv).z)); // if that isn't a cool glow effect?
comp_21=`ret *= 1-GetBlur1(bg_uv).x*2; // drop shadow
comp_22=`ret = lerp( ret, float3(1,0.01,0.4),tex2D( sampler_fw_main, uv).x);
comp_23=`//ret = tex2D(sampler_main, uv);
comp_24=`re = tex2D( sampler_MilkDrop3_002, my_uv);
comp_25=`re = lerp( tex2D(sampler_MilkDrop3_003,my_uv), re, ret.x);
comp_26=`ret = lerp( re, 1-re, ret.y);
comp_27=`
comp_28=`}
[PRESET1_END]

[PRESET2_BEGIN]
NAME=MilkDrop2077 - NeonAngel vs Flexi - Venom Textures 2 Manda3
MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=4.000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=9
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=0.958
fWaveSmoothing=0.450
fWaveParam=0.000
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=1.320
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=25.600
nMotionVectorsY=9.600
mv_dx=0.000
mv_dy=0.000
mv_l=5.000
mv_r=1.000
mv_g=0.500
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
per_frame_init_1=n = 0; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );
per_frame_init_2=
per_frame_init_3=MINBPM = 30; MAXBPM = 220; num_res = 100;
per_frame_init_4=index = 0;
per_frame_init_5=loop (num_res,
per_frame_init_6=  n = 12*index;
per_frame_init_7=  BPM      = minbpm * pow(maxbpm/minbpm,index/num_res);
per_frame_init_8=  gmegabuf(n) = BPM;
per_frame_init_9=  index += 1;
per_frame_init_10=);
per_frame_init_11=pi = 3.1416;
per_frame_init_12=OCTAVE = (num_res) * log(2) / log (MAXBPM / MINBPM);
per_frame_init_13=
per_frame_init_14=q7 = .15; //MyZoom
per_frame_init_15=q8 =  rand(2)-0.25; //fractal modifier
per_frame_init_16=q16 = 1.8; //#fish eye
per_frame_init_17=start = 1; travel = 0; RotZ = 0; t0 = time+3;
per_frame_init_18=cran0 = rand(1);
per_frame_init_19=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_20=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_21=
per_frame_init_22=//Find random starting point
per_frame_init_23=while (exec2(
per_frame_init_24=  ran1 = rand(8); ran2 = rand(8); ran3 = rand(8);
per_frame_init_25=  PosX = rand(8); PosY = rand(8); PosZ = rand(8); 
per_frame_init_26=
per_frame_init_27=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_28=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_29=
per_frame_init_30=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_31=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_32=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_33=
per_frame_init_34=  //***********BOT*************
per_frame_init_35=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_36=  dist = 0.001;
per_frame_init_37=  while (exec2(
per_frame_init_38=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_39=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_40=    uvx = 1+2*((uvx/4+30.5 - int(uvx/4+30.5))-.5);
per_frame_init_41=    uvy = 2+2*((uvy/4+30.5 - int(uvy/4+30.5))-.5);
per_frame_init_42=    uvz = 3+2*((uvz/4+30.5 - int(uvz/4+30.5))-.5);
per_frame_init_43=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_44=    loop (7+1,
per_frame_init_45=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_46=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_47=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_48=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_49=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_50=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_51=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_52=    );
per_frame_init_53=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_54=    dist *= 1.05;
per_frame_init_55=  ,(dist < 0.6)*(len > 30)));
per_frame_init_56=,(dist < .06))); //end while
per_frame_init_57=
per_frame_1=dt = min (1/fps,0.1) ; fps_ = 1/dt;
per_frame_2=dec_f = 0.8; dec_m = 1 - 4*dt; dec_s = 1 - dt;
per_frame_3=vol = (bass+mid/2+treb)/3;
per_frame_4=vol_ = vol_*dec_m + (1-dec_m)*vol;
per_frame_5=dec = dec_s;
per_frame_6=vol2 = vol2*dec + (1-dec)*min(3,vol);
per_frame_7=maxvol = if (vol>maxvol,vol,maxvol*dec_s);
per_frame_8=
per_frame_9=excite = vol-vol_;
per_frame_10=index = 0; maxind1 = 0; mean = 0;
per_frame_11=loop (num_res, 
per_frame_12=  n = index*12;  omega=gmegabuf(n) * 2*pi/60;
per_frame_13=  gmegabuf (n+1) *= 1- 0.25*dt; 
per_frame_14=  EC_Steps = int (10*dt*omega)+1; dt1 = dt/EC_Steps;
per_frame_15=  ex = excite ;
per_frame_16=  loop (EC_Steps, // Euler-Cauchy 
per_frame_17=    gmegabuf (n+1) += (ex - sqr(omega)*gmegabuf(n+2)) * dt1;
per_frame_18=    gmegabuf (n+2) += gmegabuf(n+1) * dt1);
per_frame_19=  beatcos  = gmegabuf(n+1);  beatsin = gmegabuf(n+2)*omega;
per_frame_20=  quad     = sqrt (pow(beatsin,2) + pow(beatcos,2)) ;
per_frame_21=   mean += quad/num_res;
per_frame_22=  gmegabuf (n+3) = gmegabuf(n+3) *dec_m +  quad* (1-dec_m);
per_frame_23=  if (gmegabuf(n+3) > gmegabuf(maxind1*12+3), maxind1 = index, 0); 
per_frame_24=index += 1;);
per_frame_25=quali = gmegabuf(maxind1*12+3)/mean;
per_frame_26=
per_frame_27=BPM   = minbpm * pow(maxbpm/minbpm,maxind1/num_res);
per_frame_28=if (BPM>160, BPM/=2,0);
per_frame_29=trel1 += (BPM/60*pi+excite*cosb*cosb*4) * (maxvol>0.7)*dt;
per_frame_30=q32 = trel1;
per_frame_31=
per_frame_32=speed = (0.05 + dist_*0.4)* (1+avg)/q7*(0.4+vol_);
per_frame_33=ds = ds * dec_s + (1-dec_s)*speed*.25/fps_; 
per_frame_34=RotZ = 0.2*pow (sin(time/8),3);
per_frame_35=
per_frame_36=//Position 
per_frame_37=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_38=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_39=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_40=
per_frame_41=angchg = (.3-dist_)*(dist_ < .3)*3;
per_frame_42=v1 = v1 * dec_m + (1-dec_m)* RotZ * ds;
per_frame_43=v2p = v2p *dec_m + (1-dec_m)* angchg *xslope/fps;
per_frame_44=v3p = v3p *dec_m + (1-dec_m)*(angchg *yslope/fps);
per_frame_45=v2 = v2 *dec_m + (1-dec_m)* v2p;
per_frame_46=v3 = v3 *dec_m + (1-dec_m)* v3p;
per_frame_47=
per_frame_48=
per_frame_49=//push old RotMat
per_frame_50=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_51=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_52=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_53=
per_frame_54=n = 0; avg = 0;
per_frame_55=loop (5,
per_frame_56=  n = n+1;
per_frame_57=  //new Rot. Mat for infinitesimal angles
per_frame_58=  ran1 = rand(100)/100;
per_frame_59=  ran2 = rand(100)/200-.25;
per_frame_60=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_61=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_62=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_63=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_64=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_65=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_66=
per_frame_67=  //pop old RotMat
per_frame_68=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_69=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_70=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_71=
per_frame_72=  //Multiply new RotMat by old one
per_frame_73=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_74=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_75=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_76=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_77=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_78=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_79=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_80=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_81=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_82=
per_frame_83=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_84=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_85=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_86=
per_frame_87=  //***********BOT*************
per_frame_88=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_89=  dist = 0.002;
per_frame_90=  while (exec2(
per_frame_91=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_92=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_93=//    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_94=//    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_95=//    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_96=    uvx = 1+2*((uvx/4+30.5 - int(uvx/4+30.5))-.5);
per_frame_97=    uvy = 2+2*((uvy/4+30.5 - int(uvy/4+30.5))-.5);
per_frame_98=    uvz = 3+2*((uvz/4+30.5 - int(uvz/4+30.5))-.5);
per_frame_99=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_100=    loop (7+1,
per_frame_101=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_102=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_103=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_104=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_105=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_106=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_107=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_108=    );
per_frame_109=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_110=    dist *= 1.1;
per_frame_111=  ,(dist < 0.6)*(len > 30)));
per_frame_112=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_113=  avg = avg+abs(megabuf(n)/5);
per_frame_114=); //end loop 5
per_frame_115=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_116=
per_frame_117=xslope = min(max(8*(megabuf(1)-megabuf(3)),-2),2);
per_frame_118=yslope = min(max(8*(megabuf(4)-megabuf(2)),-2),2);
per_frame_119=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_120=
per_frame_121=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_122=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_123=start = start * .9;
per_frame_124=q11 = v1; q12 = -v2; q13 = v3;
per_frame_125=//forward comp. of Rotation
per_frame_126=
per_frame_127=warp = 0.0; zoom = 1; dx = q12/q16; dy = q13/q16; 
per_frame_128=rot =q11;
per_frame_129=
per_frame_130=//BEAT
per_frame_131=sinb = sin(trel1);
per_frame_132=cosb = cos(trel1);
per_frame_133=
per_frame_134=bt1 = sinb*sinb_<0;
per_frame_135=bt2 = cosb*cosb_<0;
per_frame_136=
per_frame_137=if (bt1, b1x = rand(2)-1; b1y = rand(2)-1;,0);
per_frame_138=if (bt2, b2x = rand(2)-1; b2y = rand(2)-1;,0);
per_frame_139=//if (bt2,bx2=b1x;b2y=b1y,0);
per_frame_140=
per_frame_141=sinb_=sinb;
per_frame_142=cosb_=cosb;
per_frame_143=bri = vol2*0.02+excite*0.015;
per_frame_144=
per_frame_145=q1= b1x*0.5;
per_frame_146=q2= b1y*0.5;
per_frame_147=mov = sqrt (v3*v3+v2*v2)/dt;  monitor = nomov;
per_frame_148=
per_frame_149=
per_frame_150=q17 =b2x*0.5;
per_frame_151=q18= b2y*0.5;
per_frame_152=
per_frame_153=q3 = pow(sinb,2)*bri * max(0,1-10*mov);
per_frame_154=q19= pow(cosb,2)*bri*1;
per_frame_155=
per_frame_156=monitor = vol2
per_frame_157=;
per_pixel_1=warp = 0.0; zoom = 1; 
per_pixel_2=tx = tan((2*x-1)*0.9);
per_pixel_3=ty = tan((2*y-1)*0.9);
per_pixel_4=
per_pixel_5=dx = q12/q16* (1+0.5*abs(tx)); 
per_pixel_6=dy = q13/q16* (1+0.5*abs(ty)); 
per_pixel_7=
per_pixel_8=
per_pixel_9=dx += q13*ty*(x-0.5)*1; 
per_pixel_10=dy += q12*tx*(y-0.5)*1; 
per_pixel_11=
per_pixel_12=//muss experimentell an tele angepasst werden; momentan 1.5 !!!
warp_1=`float seed, dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`static const float2 compxy = float2 (q12,q13);
warp_4=`static const float3 CamPos = float3(q4,q5,q6);
warp_5=`static const float sustain = .97- q14, change = q14, ds = q10;
warp_6=`static const float myzoom = q7, limit = 35, tele=q16;
warp_7=`static const float3 mod1 = (rand_preset > 0.5);
warp_8=`float GetDist(float2 uvi) {float2 tmp; tmp = tex2D (sampler_pw_main, uvi).gb; 
warp_9=`  return 1-(tmp.y + 1.0/255*tmp.x);}
warp_10=`
warp_11=`float2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);
warp_12=`  return (float2(fg,fb/255.0));}
warp_13=`
warp_14=`float tdist (float d) {return tan(d*1.4)/1.4;}
warp_15=`
warp_16=`float MinDist (float2 uvi, float d) 
warp_17=`{  float4 nb; float4 nb2; float2 pix;
warp_18=`   pix = texsize.zw*d;
warp_19=`   nb.x = GetDist(uvi+pix*float2(-1,-1));    nb.y = GetDist(uvi+pix*float2(1,-1));
warp_20=`   nb.z = GetDist(uvi+pix*float2(1,1));      nb.w = GetDist(uvi+pix*float2(-1,1));
warp_21=`   nb2.x = GetDist(uvi+pix*float2(0,-1));    nb2.y = GetDist(uvi+pix*float2(1,0));
warp_22=`   nb2.z = GetDist(uvi+pix*float2(0,1));     nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_23=`   nb = min( nb, nb2 );   nb.xy = min( nb.xy, nb.zw );
warp_24=`   return min( nb.x, nb.y );
warp_25=`}
warp_26=`
warp_27=`float4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;
warp_28=`  zz = uvi; zz0 = zz+q8; li=0;
warp_29=`  for (int n = 0; n <= 8; n++) {
warp_30=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_31=`    zz *= max(.25/tmp, .25)*4;
warp_32=`    zz = 2.6*zz + zz0;}
warp_33=`  return float4(zz,li);}
warp_34=`
warp_35=`shader_body {
warp_36=`uv1 = (uv-.5)*aspect.xy*tele;
warp_37=`uv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;
warp_38=`//uv = (uv-.5)*(1-(1.001*ds/tdist(GetDist(uv))+dot(compxy,uv1))) + .5;
warp_39=`
warp_40=`float3 noise = 2; 
warp_41=`dist = noise.r; seed = 1;
warp_42=`   if (noise.g > 0.15) 
warp_43=`   {  seed = 0;float3 noiseBiased = noise - 0.3;
warp_44=`      dist = min (MinDist(uv,2), 111) +  0.008* noiseBiased.x * noise.y ; }
warp_45=`
warp_46=`dist = min(dist,GetDist(uv))- ds*0.7;
warp_47=`uv2 = mul(float3(uv1*tdist(dist),tdist(dist)-.0)/myzoom,RotMat)+CamPos;
warp_48=`uv2 = (frac(uv2/4+.5)-.5)*2+float3(1,2,3);
warp_49=`box = mbox (uv2); len = length(box.xyz); 
warp_50=`
warp_51=`//struc = lerp (saturate(1-1.5*dot(box,mod1)/limit),0.5,.0);
warp_52=`
warp_53=`if ((len < limit) && (dist > 0.04*(1-rad))){
warp_54=` ret.r = lerp (struc,GetPixel(uv).r,sustain); ret.gb=  PutDist(dist); } 
warp_55=` else {ret = tex2D(sampler_fc_main,uv)*sustain  - 1.0/255;} 
warp_56=`//ret = 0;
warp_57=`}
comp_1=`float rdist, cross1;
comp_2=`float2 dz, dz1, uv0, uv1, uv4, uva, uvb;
comp_3=`float3 flash1, flash2, col1, col2;
comp_4=`static const float2 pos1 = float2 (q1,q2);
comp_5=`static const float2 pos2 = float2 (q17,q18);
comp_6=`static const float pix = 0.002;
comp_7=`
comp_8=`float GetBuf(float2 uvi)
comp_9=`  {float res;
comp_10=`  res = lerp(GetBlur1(uvi).r,GetPixel(uvi).r,0.15);
comp_11=`  res = pow(res,1.2)*2;
comp_12=`  return res * (res>0.06);}
comp_13=`
comp_14=`float aTan2(float y, float x) {float angle;	 float abs_y = abs(y);
comp_15=`if (x >= 0) {float r = (x - abs_y) / (x + abs_y); angle = 1-r;} 
comp_16=`else {float r = (x + abs_y) / (abs_y - x); angle = 3-r; }	
comp_17=`//angle = angle * .25;
comp_18=`return y < 0 ? -angle : angle;}
comp_19=`
comp_20=`shader_body {
comp_21=`uv += texsize.zw/2;
comp_22=`uv0 = uv;
comp_23=`rdist = GetBlur1(uv0).b;
comp_24=`
comp_25=`dz1.x = GetBuf(uv+pix*float2(1,0)) - GetBuf(uv+pix*float2(-1,0));
comp_26=`dz1.y = GetBuf(uv+pix*float2(0,1)) - GetBuf(uv+pix*float2(0,-1));
comp_27=`uv += dz1 * saturate(1-GetBlur1(uv).r*0.8)*0.2;
comp_28=`rdist = GetBlur1(uv).b;
comp_29=`
comp_30=`col1 = tex2D(sampler_noise_hq,rdist*0.05+time*0.02);
comp_31=`col1 = lerp (col1,roam_sin,0.5);
comp_32=`col2 = tex2D(sampler_noise_hq,rdist*0.06+time*0.027);
comp_33=`col2 = lerp (col2,roam_sin,0.5);
comp_34=`col2 = col1.bgr;
comp_35=`
comp_36=`uv4 = uv-0.5-GetBlur1(uv).r*0.4;
comp_37=`uva = uv4-pos1;
comp_38=`uvb = uv4-pos2;
comp_39=`cross1 = abs(sin(M_PI*(aTan2(uva.x,uva.y)+4*q20)))+rdist*0.5+0.1;
comp_40=`flash1 = 1/dot (uva,uva)/cross1*(1-rdist);
comp_41=`flash2 = 1/dot (uvb,uvb)*(rdist+0.5);
comp_42=`
comp_43=`float r0 = rdist;
comp_44=`ret = saturate(1-2*r0) * (flash1*col1*q3 + flash2*(1-col1)*q19+0.1);
comp_45=`ret += saturate(2*r0)  * (flash1*col2*q3 + flash2*(1-col2)*q19);
comp_46=`
comp_47=`ret += GetBuf(uv)*0.05;
comp_48=`//ret *= 1-(rand_preset.y-0.5)*GetBuf(uv);
comp_49=`
comp_50=`ret = 1-exp(-ret);
comp_51=`
comp_52=`//MilkDrop3 Brightness Mode:
comp_53=`ret *= 1.2;
comp_54=`}
[PRESET2_END]

[SPRITE1_BEGIN]
SpriteName=sprites\Mandala1.png
SpriteColorKey=0x000000
SpriteLayer=0
SpriteBlend=2
SpriteAlpha=0.500000
SpriteBurn=1
SpriteX=0.000000
SpriteY=0.000000
SpriteSX=-0.500000
SpriteSY=-0.500000
SpriteRot=1.000000
SpriteSpeed=0.100000
SpriteRepeatX=1.000000
SpriteRepeatY=1.000000
code_1=new_scale=1.0+0.02*bass_att;
code_2=sx=new_scale;
code_3=sy=new_scale;
[SPRITE1_END]
